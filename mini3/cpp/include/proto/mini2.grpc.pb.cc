// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mini2.proto

#include "mini2.pb.h"
#include "mini2.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mini2 {

static const char* EntryPointService_method_names[] = {
  "/mini2.EntryPointService/StreamCollisions",
  "/mini2.EntryPointService/SetDatasetInfo",
};

std::unique_ptr< EntryPointService::Stub> EntryPointService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EntryPointService::Stub> stub(new EntryPointService::Stub(channel, options));
  return stub;
}

EntryPointService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamCollisions_(EntryPointService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SetDatasetInfo_(EntryPointService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::mini2::CollisionData>* EntryPointService::Stub::StreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::mini2::CollisionData>::Create(channel_.get(), rpcmethod_StreamCollisions_, context, response);
}

void EntryPointService::Stub::async::StreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::ClientWriteReactor< ::mini2::CollisionData>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::mini2::CollisionData>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamCollisions_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::mini2::CollisionData>* EntryPointService::Stub::AsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::mini2::CollisionData>::Create(channel_.get(), cq, rpcmethod_StreamCollisions_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::mini2::CollisionData>* EntryPointService::Stub::PrepareAsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::mini2::CollisionData>::Create(channel_.get(), cq, rpcmethod_StreamCollisions_, context, response, false, nullptr);
}

::grpc::Status EntryPointService::Stub::SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDatasetInfo_, context, request, response);
}

void EntryPointService::Stub::async::SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDatasetInfo_, context, request, response, std::move(f));
}

void EntryPointService::Stub::async::SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDatasetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* EntryPointService::Stub::PrepareAsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::DatasetInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDatasetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* EntryPointService::Stub::AsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDatasetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

EntryPointService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EntryPointService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< EntryPointService::Service, ::mini2::CollisionData, ::mini2::Empty>(
          [](EntryPointService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::mini2::CollisionData>* reader,
             ::mini2::Empty* resp) {
               return service->StreamCollisions(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EntryPointService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EntryPointService::Service, ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EntryPointService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::DatasetInfo* req,
             ::mini2::Empty* resp) {
               return service->SetDatasetInfo(ctx, req, resp);
             }, this)));
}

EntryPointService::Service::~Service() {
}

::grpc::Status EntryPointService::Service::StreamCollisions(::grpc::ServerContext* context, ::grpc::ServerReader< ::mini2::CollisionData>* reader, ::mini2::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EntryPointService::Service::SetDatasetInfo(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* InterServerService_method_names[] = {
  "/mini2.InterServerService/ForwardData",
  "/mini2.InterServerService/ShareAnalysis",
  "/mini2.InterServerService/SetTotalDatasetSize",
};

std::unique_ptr< InterServerService::Stub> InterServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InterServerService::Stub> stub(new InterServerService::Stub(channel, options));
  return stub;
}

InterServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ForwardData_(InterServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareAnalysis_(InterServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTotalDatasetSize_(InterServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InterServerService::Stub::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForwardData_, context, request, response);
}

void InterServerService::Stub::async::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardData_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::CollisionBatch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForwardData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForwardDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareAnalysis_, context, request, response);
}

void InterServerService::Stub::async::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareAnalysis_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareAnalysis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::RiskAssessment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareAnalysis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareAnalysisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTotalDatasetSize_, context, request, response);
}

void InterServerService::Stub::async::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTotalDatasetSize_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTotalDatasetSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::DatasetInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTotalDatasetSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

InterServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::CollisionBatch* req,
             ::mini2::Empty* resp) {
               return service->ForwardData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::RiskAssessment* req,
             ::mini2::Empty* resp) {
               return service->ShareAnalysis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::DatasetInfo* req,
             ::mini2::Empty* resp) {
               return service->SetTotalDatasetSize(ctx, req, resp);
             }, this)));
}

InterServerService::Service::~Service() {
}

::grpc::Status InterServerService::Service::ForwardData(::grpc::ServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::ShareAnalysis(::grpc::ServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::SetTotalDatasetSize(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mini2


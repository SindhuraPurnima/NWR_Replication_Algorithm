// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mini2.proto
#ifndef GRPC_mini2_2eproto__INCLUDED
#define GRPC_mini2_2eproto__INCLUDED

#include "mini2.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace mini2 {

// Service for Python client â†’ Server A communication
class EntryPointService final {
 public:
  static constexpr char const* service_full_name() {
    return "mini2.EntryPointService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Defines how clients stream data to Server A
    std::unique_ptr< ::grpc::ClientWriterInterface< ::mini2::CollisionData>> StreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::mini2::CollisionData>>(StreamCollisionsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>> AsyncStreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>>(AsyncStreamCollisionsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>> PrepareAsyncStreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>>(PrepareAsyncStreamCollisionsRaw(context, response, cq));
    }
    // Add new method to set dataset size
    virtual ::grpc::Status SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncSetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncSetDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncSetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncSetDatasetInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Defines how clients stream data to Server A
      virtual void StreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::ClientWriteReactor< ::mini2::CollisionData>* reactor) = 0;
      // Add new method to set dataset size
      virtual void SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::mini2::CollisionData>* StreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>* AsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::mini2::CollisionData>* PrepareAsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::mini2::CollisionData>> StreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::mini2::CollisionData>>(StreamCollisionsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::mini2::CollisionData>> AsyncStreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::mini2::CollisionData>>(AsyncStreamCollisionsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::mini2::CollisionData>> PrepareAsyncStreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::mini2::CollisionData>>(PrepareAsyncStreamCollisionsRaw(context, response, cq));
    }
    ::grpc::Status SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncSetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncSetDatasetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncSetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncSetDatasetInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StreamCollisions(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::ClientWriteReactor< ::mini2::CollisionData>* reactor) override;
      void SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetDatasetInfo(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::mini2::CollisionData>* StreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::mini2::CollisionData>* AsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::mini2::CollisionData>* PrepareAsyncStreamCollisionsRaw(::grpc::ClientContext* context, ::mini2::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncSetDatasetInfoRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCollisions_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDatasetInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Defines how clients stream data to Server A
    virtual ::grpc::Status StreamCollisions(::grpc::ServerContext* context, ::grpc::ServerReader< ::mini2::CollisionData>* reader, ::mini2::Empty* response);
    // Add new method to set dataset size
    virtual ::grpc::Status SetDatasetInfo(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCollisions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamCollisions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamCollisions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCollisions(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mini2::CollisionData>* /*reader*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCollisions(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::mini2::Empty, ::mini2::CollisionData>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDatasetInfo(::grpc::ServerContext* context, ::mini2::DatasetInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamCollisions<WithAsyncMethod_SetDatasetInfo<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StreamCollisions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamCollisions() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::mini2::CollisionData, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::mini2::Empty* response) { return this->StreamCollisions(context, response); }));
    }
    ~WithCallbackMethod_StreamCollisions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCollisions(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mini2::CollisionData>* /*reader*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::mini2::CollisionData>* StreamCollisions(
      ::grpc::CallbackServerContext* /*context*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) { return this->SetDatasetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SetDatasetInfo(
        ::grpc::MessageAllocator< ::mini2::DatasetInfo, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDatasetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StreamCollisions<WithCallbackMethod_SetDatasetInfo<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamCollisions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamCollisions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamCollisions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCollisions(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mini2::CollisionData>* /*reader*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCollisions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamCollisions() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamCollisions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCollisions(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mini2::CollisionData>* /*reader*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCollisions(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDatasetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamCollisions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamCollisions() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->StreamCollisions(context, response); }));
    }
    ~WithRawCallbackMethod_StreamCollisions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCollisions(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mini2::CollisionData>* /*reader*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* StreamCollisions(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDatasetInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDatasetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDatasetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDatasetInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::DatasetInfo, ::mini2::Empty>* streamer) {
                       return this->StreamedSetDatasetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDatasetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDatasetInfo(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDatasetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::DatasetInfo,::mini2::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetDatasetInfo<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetDatasetInfo<Service > StreamedService;
};

// Service for inter-server communication (A,B,C,D,E)
class InterServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mini2.InterServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Forward data between servers
    virtual ::grpc::Status ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncForwardDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncForwardDataRaw(context, request, cq));
    }
    // Share analysis results
    virtual ::grpc::Status ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncShareAnalysisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncShareAnalysisRaw(context, request, cq));
    }
    // Add new method
    virtual ::grpc::Status SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Forward data between servers
      virtual void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Share analysis results
      virtual void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add new method
      virtual void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncForwardDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncForwardDataRaw(context, request, cq));
    }
    ::grpc::Status ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncShareAnalysisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncShareAnalysisRaw(context, request, cq));
    }
    ::grpc::Status SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ForwardData_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareAnalysis_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTotalDatasetSize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Forward data between servers
    virtual ::grpc::Status ForwardData(::grpc::ServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response);
    // Share analysis results
    virtual ::grpc::Status ShareAnalysis(::grpc::ServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response);
    // Add new method
    virtual ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ForwardData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardData(::grpc::ServerContext* context, ::mini2::CollisionBatch* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareAnalysis(::grpc::ServerContext* context, ::mini2::RiskAssessment* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDatasetSize(::grpc::ServerContext* context, ::mini2::DatasetInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ForwardData<WithAsyncMethod_ShareAnalysis<WithAsyncMethod_SetTotalDatasetSize<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ForwardData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::CollisionBatch, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response) { return this->ForwardData(context, request, response); }));}
    void SetMessageAllocatorFor_ForwardData(
        ::grpc::MessageAllocator< ::mini2::CollisionBatch, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::CollisionBatch, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardData(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::RiskAssessment, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response) { return this->ShareAnalysis(context, request, response); }));}
    void SetMessageAllocatorFor_ShareAnalysis(
        ::grpc::MessageAllocator< ::mini2::RiskAssessment, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::RiskAssessment, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareAnalysis(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) { return this->SetTotalDatasetSize(context, request, response); }));}
    void SetMessageAllocatorFor_SetTotalDatasetSize(
        ::grpc::MessageAllocator< ::mini2::DatasetInfo, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTotalDatasetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ForwardData<WithCallbackMethod_ShareAnalysis<WithCallbackMethod_SetTotalDatasetSize<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ForwardData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ForwardData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareAnalysis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDatasetSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ForwardData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ForwardData(context, request, response); }));
    }
    ~WithRawCallbackMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareAnalysis(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareAnalysis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTotalDatasetSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTotalDatasetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ForwardData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::CollisionBatch, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::CollisionBatch, ::mini2::Empty>* streamer) {
                       return this->StreamedForwardData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForwardData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::CollisionBatch,::mini2::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::RiskAssessment, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::RiskAssessment, ::mini2::Empty>* streamer) {
                       return this->StreamedShareAnalysis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareAnalysis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::RiskAssessment,::mini2::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::DatasetInfo, ::mini2::Empty>* streamer) {
                       return this->StreamedSetTotalDatasetSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTotalDatasetSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::DatasetInfo,::mini2::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ForwardData<WithStreamedUnaryMethod_ShareAnalysis<WithStreamedUnaryMethod_SetTotalDatasetSize<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ForwardData<WithStreamedUnaryMethod_ShareAnalysis<WithStreamedUnaryMethod_SetTotalDatasetSize<Service > > > StreamedService;
};

}  // namespace mini2


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_mini2_2eproto__INCLUDED

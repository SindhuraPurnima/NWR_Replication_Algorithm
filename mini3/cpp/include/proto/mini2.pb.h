// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mini3/proto/mini2.proto
// Protobuf C++ Version: 5.29.3

#ifndef mini3_2fproto_2fmini2_2eproto_2epb_2eh
#define mini3_2fproto_2fmini2_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mini3_2fproto_2fmini2_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mini3_2fproto_2fmini2_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mini3_2fproto_2fmini2_2eproto;
namespace mini2 {
class AnalysisRecord;
struct AnalysisRecordDefaultTypeInternal;
extern AnalysisRecordDefaultTypeInternal _AnalysisRecord_default_instance_;
class CollisionBatch;
struct CollisionBatchDefaultTypeInternal;
extern CollisionBatchDefaultTypeInternal _CollisionBatch_default_instance_;
class CollisionData;
struct CollisionDataDefaultTypeInternal;
extern CollisionDataDefaultTypeInternal _CollisionData_default_instance_;
class DatasetInfo;
struct DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MetricsResponse;
struct MetricsResponseDefaultTypeInternal;
extern MetricsResponseDefaultTypeInternal _MetricsResponse_default_instance_;
class MetricsUpdate;
struct MetricsUpdateDefaultTypeInternal;
extern MetricsUpdateDefaultTypeInternal _MetricsUpdate_default_instance_;
class RiskAssessment;
struct RiskAssessmentDefaultTypeInternal;
extern RiskAssessmentDefaultTypeInternal _RiskAssessment_default_instance_;
class StealRequest;
struct StealRequestDefaultTypeInternal;
extern StealRequestDefaultTypeInternal _StealRequest_default_instance_;
class StealResponse;
struct StealResponseDefaultTypeInternal;
extern StealResponseDefaultTypeInternal _StealResponse_default_instance_;
class SyncRequest;
struct SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
class SyncResponse;
struct SyncResponseDefaultTypeInternal;
extern SyncResponseDefaultTypeInternal _SyncResponse_default_instance_;
}  // namespace mini2
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mini2 {

// ===================================================================


// -------------------------------------------------------------------

class SyncResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.SyncResponse) */ {
 public:
  inline SyncResponse() : SyncResponse(nullptr) {}
  ~SyncResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncResponse(const SyncResponse& from) : SyncResponse(nullptr, from) {}
  inline SyncResponse(SyncResponse&& from) noexcept
      : SyncResponse(nullptr, std::move(from)) {}
  inline SyncResponse& operator=(const SyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncResponse& operator=(SyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncResponse* internal_default_instance() {
    return reinterpret_cast<const SyncResponse*>(
        &_SyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SyncResponse& a, SyncResponse& b) { a.Swap(&b); }
  inline void Swap(SyncResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncResponse& from) { SyncResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.SyncResponse"; }

 protected:
  explicit SyncResponse(::google::protobuf::Arena* arena);
  SyncResponse(::google::protobuf::Arena* arena, const SyncResponse& from);
  SyncResponse(::google::protobuf::Arena* arena, SyncResponse&& from) noexcept
      : SyncResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.SyncResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SyncResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class SyncRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {}
  ~SyncRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncRequest(const SyncRequest& from) : SyncRequest(nullptr, from) {}
  inline SyncRequest(SyncRequest&& from) noexcept
      : SyncRequest(nullptr, std::move(from)) {}
  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
        &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SyncRequest& a, SyncRequest& b) { a.Swap(&b); }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncRequest& from) { SyncRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.SyncRequest"; }

 protected:
  explicit SyncRequest(::google::protobuf::Arena* arena);
  SyncRequest(::google::protobuf::Arena* arena, const SyncRequest& from);
  SyncRequest(::google::protobuf::Arena* arena, SyncRequest&& from) noexcept
      : SyncRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
  };
  // string server_id = 1;
  void clear_server_id() ;
  const std::string& server_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_id(Arg_&& arg, Args_... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* value);

  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(
      const std::string& value);
  std::string* _internal_mutable_server_id();

  public:
  // @@protoc_insertion_point(class_scope:mini2.SyncRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SyncRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class StealRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.StealRequest) */ {
 public:
  inline StealRequest() : StealRequest(nullptr) {}
  ~StealRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StealRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StealRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StealRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StealRequest(const StealRequest& from) : StealRequest(nullptr, from) {}
  inline StealRequest(StealRequest&& from) noexcept
      : StealRequest(nullptr, std::move(from)) {}
  inline StealRequest& operator=(const StealRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StealRequest& operator=(StealRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StealRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StealRequest* internal_default_instance() {
    return reinterpret_cast<const StealRequest*>(
        &_StealRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(StealRequest& a, StealRequest& b) { a.Swap(&b); }
  inline void Swap(StealRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StealRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StealRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StealRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StealRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StealRequest& from) { StealRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StealRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.StealRequest"; }

 protected:
  explicit StealRequest(::google::protobuf::Arena* arena);
  StealRequest(::google::protobuf::Arena* arena, const StealRequest& from);
  StealRequest(::google::protobuf::Arena* arena, StealRequest&& from) noexcept
      : StealRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceServerFieldNumber = 1,
    kRequestedItemsFieldNumber = 2,
  };
  // string source_server = 1;
  void clear_source_server() ;
  const std::string& source_server() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_server(Arg_&& arg, Args_... args);
  std::string* mutable_source_server();
  PROTOBUF_NODISCARD std::string* release_source_server();
  void set_allocated_source_server(std::string* value);

  private:
  const std::string& _internal_source_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_server(
      const std::string& value);
  std::string* _internal_mutable_source_server();

  public:
  // int32 requested_items = 2;
  void clear_requested_items() ;
  ::int32_t requested_items() const;
  void set_requested_items(::int32_t value);

  private:
  ::int32_t _internal_requested_items() const;
  void _internal_set_requested_items(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.StealRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StealRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr source_server_;
    ::int32_t requested_items_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class RiskAssessment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.RiskAssessment) */ {
 public:
  inline RiskAssessment() : RiskAssessment(nullptr) {}
  ~RiskAssessment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RiskAssessment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RiskAssessment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RiskAssessment(
      ::google::protobuf::internal::ConstantInitialized);

  inline RiskAssessment(const RiskAssessment& from) : RiskAssessment(nullptr, from) {}
  inline RiskAssessment(RiskAssessment&& from) noexcept
      : RiskAssessment(nullptr, std::move(from)) {}
  inline RiskAssessment& operator=(const RiskAssessment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiskAssessment& operator=(RiskAssessment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RiskAssessment& default_instance() {
    return *internal_default_instance();
  }
  static inline const RiskAssessment* internal_default_instance() {
    return reinterpret_cast<const RiskAssessment*>(
        &_RiskAssessment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RiskAssessment& a, RiskAssessment& b) { a.Swap(&b); }
  inline void Swap(RiskAssessment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiskAssessment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RiskAssessment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RiskAssessment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RiskAssessment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RiskAssessment& from) { RiskAssessment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RiskAssessment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.RiskAssessment"; }

 protected:
  explicit RiskAssessment(::google::protobuf::Arena* arena);
  RiskAssessment(::google::protobuf::Arena* arena, const RiskAssessment& from);
  RiskAssessment(::google::protobuf::Arena* arena, RiskAssessment&& from) noexcept
      : RiskAssessment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBoroughFieldNumber = 1,
    kZipCodeFieldNumber = 2,
    kTotalInjuriesFieldNumber = 3,
    kTotalFatalitiesFieldNumber = 4,
  };
  // string borough = 1;
  void clear_borough() ;
  const std::string& borough() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borough(Arg_&& arg, Args_... args);
  std::string* mutable_borough();
  PROTOBUF_NODISCARD std::string* release_borough();
  void set_allocated_borough(std::string* value);

  private:
  const std::string& _internal_borough() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borough(
      const std::string& value);
  std::string* _internal_mutable_borough();

  public:
  // string zip_code = 2;
  void clear_zip_code() ;
  const std::string& zip_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zip_code(Arg_&& arg, Args_... args);
  std::string* mutable_zip_code();
  PROTOBUF_NODISCARD std::string* release_zip_code();
  void set_allocated_zip_code(std::string* value);

  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(
      const std::string& value);
  std::string* _internal_mutable_zip_code();

  public:
  // int32 total_injuries = 3;
  void clear_total_injuries() ;
  ::int32_t total_injuries() const;
  void set_total_injuries(::int32_t value);

  private:
  ::int32_t _internal_total_injuries() const;
  void _internal_set_total_injuries(::int32_t value);

  public:
  // int32 total_fatalities = 4;
  void clear_total_fatalities() ;
  ::int32_t total_fatalities() const;
  void set_total_fatalities(::int32_t value);

  private:
  ::int32_t _internal_total_fatalities() const;
  void _internal_set_total_fatalities(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.RiskAssessment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RiskAssessment& from_msg);
    ::google::protobuf::internal::ArenaStringPtr borough_;
    ::google::protobuf::internal::ArenaStringPtr zip_code_;
    ::int32_t total_injuries_;
    ::int32_t total_fatalities_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class MetricsUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.MetricsUpdate) */ {
 public:
  inline MetricsUpdate() : MetricsUpdate(nullptr) {}
  ~MetricsUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetricsUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetricsUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetricsUpdate(const MetricsUpdate& from) : MetricsUpdate(nullptr, from) {}
  inline MetricsUpdate(MetricsUpdate&& from) noexcept
      : MetricsUpdate(nullptr, std::move(from)) {}
  inline MetricsUpdate& operator=(const MetricsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsUpdate& operator=(MetricsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsUpdate* internal_default_instance() {
    return reinterpret_cast<const MetricsUpdate*>(
        &_MetricsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(MetricsUpdate& a, MetricsUpdate& b) { a.Swap(&b); }
  inline void Swap(MetricsUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MetricsUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetricsUpdate& from) { MetricsUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetricsUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.MetricsUpdate"; }

 protected:
  explicit MetricsUpdate(::google::protobuf::Arena* arena);
  MetricsUpdate(::google::protobuf::Arena* arena, const MetricsUpdate& from);
  MetricsUpdate(::google::protobuf::Arena* arena, MetricsUpdate&& from) noexcept
      : MetricsUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 1,
    kCpuLoadFieldNumber = 2,
    kMemoryUsageFieldNumber = 4,
    kNetworkLatencyFieldNumber = 5,
    kQueueSizeFieldNumber = 3,
  };
  // string server_id = 1;
  void clear_server_id() ;
  const std::string& server_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_id(Arg_&& arg, Args_... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* value);

  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(
      const std::string& value);
  std::string* _internal_mutable_server_id();

  public:
  // double cpu_load = 2;
  void clear_cpu_load() ;
  double cpu_load() const;
  void set_cpu_load(double value);

  private:
  double _internal_cpu_load() const;
  void _internal_set_cpu_load(double value);

  public:
  // double memory_usage = 4;
  void clear_memory_usage() ;
  double memory_usage() const;
  void set_memory_usage(double value);

  private:
  double _internal_memory_usage() const;
  void _internal_set_memory_usage(double value);

  public:
  // double network_latency = 5;
  void clear_network_latency() ;
  double network_latency() const;
  void set_network_latency(double value);

  private:
  double _internal_network_latency() const;
  void _internal_set_network_latency(double value);

  public:
  // int32 queue_size = 3;
  void clear_queue_size() ;
  ::int32_t queue_size() const;
  void set_queue_size(::int32_t value);

  private:
  ::int32_t _internal_queue_size() const;
  void _internal_set_queue_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.MetricsUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MetricsUpdate& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_id_;
    double cpu_load_;
    double memory_usage_;
    double network_latency_;
    ::int32_t queue_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class MetricsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.MetricsResponse) */ {
 public:
  inline MetricsResponse() : MetricsResponse(nullptr) {}
  ~MetricsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetricsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetricsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetricsResponse(const MetricsResponse& from) : MetricsResponse(nullptr, from) {}
  inline MetricsResponse(MetricsResponse&& from) noexcept
      : MetricsResponse(nullptr, std::move(from)) {}
  inline MetricsResponse& operator=(const MetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsResponse& operator=(MetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MetricsResponse*>(
        &_MetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MetricsResponse& a, MetricsResponse& b) { a.Swap(&b); }
  inline void Swap(MetricsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MetricsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetricsResponse& from) { MetricsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetricsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.MetricsResponse"; }

 protected:
  explicit MetricsResponse(::google::protobuf::Arena* arena);
  MetricsResponse(::google::protobuf::Arena* arena, const MetricsResponse& from);
  MetricsResponse(::google::protobuf::Arena* arena, MetricsResponse&& from) noexcept
      : MetricsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.MetricsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MetricsResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class Message final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string id = 2;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // int64 timestamp = 3;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::int64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mini2.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mini2.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class DatasetInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.DatasetInfo) */ {
 public:
  inline DatasetInfo() : DatasetInfo(nullptr) {}
  ~DatasetInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DatasetInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DatasetInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DatasetInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DatasetInfo(const DatasetInfo& from) : DatasetInfo(nullptr, from) {}
  inline DatasetInfo(DatasetInfo&& from) noexcept
      : DatasetInfo(nullptr, std::move(from)) {}
  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
        &_DatasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DatasetInfo& a, DatasetInfo& b) { a.Swap(&b); }
  inline void Swap(DatasetInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DatasetInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DatasetInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DatasetInfo& from) { DatasetInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DatasetInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.DatasetInfo"; }

 protected:
  explicit DatasetInfo(::google::protobuf::Arena* arena);
  DatasetInfo(::google::protobuf::Arena* arena, const DatasetInfo& from);
  DatasetInfo(::google::protobuf::Arena* arena, DatasetInfo&& from) noexcept
      : DatasetInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalSizeFieldNumber = 1,
  };
  // int64 total_size = 1;
  void clear_total_size() ;
  ::int64_t total_size() const;
  void set_total_size(::int64_t value);

  private:
  ::int64_t _internal_total_size() const;
  void _internal_set_total_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.DatasetInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DatasetInfo& from_msg);
    ::int64_t total_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class CollisionData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.CollisionData) */ {
 public:
  inline CollisionData() : CollisionData(nullptr) {}
  ~CollisionData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CollisionData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CollisionData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CollisionData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CollisionData(const CollisionData& from) : CollisionData(nullptr, from) {}
  inline CollisionData(CollisionData&& from) noexcept
      : CollisionData(nullptr, std::move(from)) {}
  inline CollisionData& operator=(const CollisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionData& operator=(CollisionData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionData* internal_default_instance() {
    return reinterpret_cast<const CollisionData*>(
        &_CollisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CollisionData& a, CollisionData& b) { a.Swap(&b); }
  inline void Swap(CollisionData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CollisionData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollisionData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CollisionData& from) { CollisionData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CollisionData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.CollisionData"; }

 protected:
  explicit CollisionData(::google::protobuf::Arena* arena);
  CollisionData(::google::protobuf::Arena* arena, const CollisionData& from);
  CollisionData(::google::protobuf::Arena* arena, CollisionData&& from) noexcept
      : CollisionData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCrashDateFieldNumber = 1,
    kCrashTimeFieldNumber = 2,
    kBoroughFieldNumber = 3,
    kZipCodeFieldNumber = 4,
    kLocationFieldNumber = 7,
    kOnStreetNameFieldNumber = 8,
    kCrossStreetNameFieldNumber = 9,
    kOffStreetNameFieldNumber = 10,
    kContributingFactorVehicle1FieldNumber = 19,
    kContributingFactorVehicle2FieldNumber = 20,
    kContributingFactorVehicle3FieldNumber = 21,
    kContributingFactorVehicle4FieldNumber = 22,
    kContributingFactorVehicle5FieldNumber = 23,
    kCollisionIdFieldNumber = 24,
    kVehicleTypeCode1FieldNumber = 25,
    kVehicleTypeCode2FieldNumber = 26,
    kVehicleTypeCode3FieldNumber = 27,
    kVehicleTypeCode4FieldNumber = 28,
    kVehicleTypeCode5FieldNumber = 29,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kNumberOfPersonsInjuredFieldNumber = 11,
    kNumberOfPersonsKilledFieldNumber = 12,
    kNumberOfPedestriansInjuredFieldNumber = 13,
    kNumberOfPedestriansKilledFieldNumber = 14,
    kNumberOfCyclistInjuredFieldNumber = 15,
    kNumberOfCyclistKilledFieldNumber = 16,
    kNumberOfMotoristInjuredFieldNumber = 17,
    kNumberOfMotoristKilledFieldNumber = 18,
  };
  // string crash_date = 1;
  void clear_crash_date() ;
  const std::string& crash_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crash_date(Arg_&& arg, Args_... args);
  std::string* mutable_crash_date();
  PROTOBUF_NODISCARD std::string* release_crash_date();
  void set_allocated_crash_date(std::string* value);

  private:
  const std::string& _internal_crash_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crash_date(
      const std::string& value);
  std::string* _internal_mutable_crash_date();

  public:
  // string crash_time = 2;
  void clear_crash_time() ;
  const std::string& crash_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crash_time(Arg_&& arg, Args_... args);
  std::string* mutable_crash_time();
  PROTOBUF_NODISCARD std::string* release_crash_time();
  void set_allocated_crash_time(std::string* value);

  private:
  const std::string& _internal_crash_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crash_time(
      const std::string& value);
  std::string* _internal_mutable_crash_time();

  public:
  // string borough = 3;
  void clear_borough() ;
  const std::string& borough() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borough(Arg_&& arg, Args_... args);
  std::string* mutable_borough();
  PROTOBUF_NODISCARD std::string* release_borough();
  void set_allocated_borough(std::string* value);

  private:
  const std::string& _internal_borough() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borough(
      const std::string& value);
  std::string* _internal_mutable_borough();

  public:
  // string zip_code = 4;
  void clear_zip_code() ;
  const std::string& zip_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zip_code(Arg_&& arg, Args_... args);
  std::string* mutable_zip_code();
  PROTOBUF_NODISCARD std::string* release_zip_code();
  void set_allocated_zip_code(std::string* value);

  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(
      const std::string& value);
  std::string* _internal_mutable_zip_code();

  public:
  // string location = 7;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string on_street_name = 8;
  void clear_on_street_name() ;
  const std::string& on_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_on_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_on_street_name();
  PROTOBUF_NODISCARD std::string* release_on_street_name();
  void set_allocated_on_street_name(std::string* value);

  private:
  const std::string& _internal_on_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_on_street_name(
      const std::string& value);
  std::string* _internal_mutable_on_street_name();

  public:
  // string cross_street_name = 9;
  void clear_cross_street_name() ;
  const std::string& cross_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cross_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_cross_street_name();
  PROTOBUF_NODISCARD std::string* release_cross_street_name();
  void set_allocated_cross_street_name(std::string* value);

  private:
  const std::string& _internal_cross_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cross_street_name(
      const std::string& value);
  std::string* _internal_mutable_cross_street_name();

  public:
  // string off_street_name = 10;
  void clear_off_street_name() ;
  const std::string& off_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_off_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_off_street_name();
  PROTOBUF_NODISCARD std::string* release_off_street_name();
  void set_allocated_off_street_name(std::string* value);

  private:
  const std::string& _internal_off_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_off_street_name(
      const std::string& value);
  std::string* _internal_mutable_off_street_name();

  public:
  // string contributing_factor_vehicle_1 = 19;
  void clear_contributing_factor_vehicle_1() ;
  const std::string& contributing_factor_vehicle_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_1(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_1();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_1();
  void set_allocated_contributing_factor_vehicle_1(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_1(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_1();

  public:
  // string contributing_factor_vehicle_2 = 20;
  void clear_contributing_factor_vehicle_2() ;
  const std::string& contributing_factor_vehicle_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_2(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_2();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_2();
  void set_allocated_contributing_factor_vehicle_2(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_2(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_2();

  public:
  // string contributing_factor_vehicle_3 = 21;
  void clear_contributing_factor_vehicle_3() ;
  const std::string& contributing_factor_vehicle_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_3(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_3();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_3();
  void set_allocated_contributing_factor_vehicle_3(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_3(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_3();

  public:
  // string contributing_factor_vehicle_4 = 22;
  void clear_contributing_factor_vehicle_4() ;
  const std::string& contributing_factor_vehicle_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_4(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_4();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_4();
  void set_allocated_contributing_factor_vehicle_4(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_4(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_4();

  public:
  // string contributing_factor_vehicle_5 = 23;
  void clear_contributing_factor_vehicle_5() ;
  const std::string& contributing_factor_vehicle_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_5(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_5();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_5();
  void set_allocated_contributing_factor_vehicle_5(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_5(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_5();

  public:
  // string collision_id = 24;
  void clear_collision_id() ;
  const std::string& collision_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_collision_id(Arg_&& arg, Args_... args);
  std::string* mutable_collision_id();
  PROTOBUF_NODISCARD std::string* release_collision_id();
  void set_allocated_collision_id(std::string* value);

  private:
  const std::string& _internal_collision_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collision_id(
      const std::string& value);
  std::string* _internal_mutable_collision_id();

  public:
  // string vehicle_type_code_1 = 25;
  void clear_vehicle_type_code_1() ;
  const std::string& vehicle_type_code_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_1(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_1();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_1();
  void set_allocated_vehicle_type_code_1(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_1(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_1();

  public:
  // string vehicle_type_code_2 = 26;
  void clear_vehicle_type_code_2() ;
  const std::string& vehicle_type_code_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_2(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_2();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_2();
  void set_allocated_vehicle_type_code_2(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_2(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_2();

  public:
  // string vehicle_type_code_3 = 27;
  void clear_vehicle_type_code_3() ;
  const std::string& vehicle_type_code_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_3(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_3();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_3();
  void set_allocated_vehicle_type_code_3(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_3(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_3();

  public:
  // string vehicle_type_code_4 = 28;
  void clear_vehicle_type_code_4() ;
  const std::string& vehicle_type_code_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_4(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_4();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_4();
  void set_allocated_vehicle_type_code_4(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_4(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_4();

  public:
  // string vehicle_type_code_5 = 29;
  void clear_vehicle_type_code_5() ;
  const std::string& vehicle_type_code_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_5(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_5();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_5();
  void set_allocated_vehicle_type_code_5(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_5(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_5();

  public:
  // double latitude = 5;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // double longitude = 6;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // int32 number_of_persons_injured = 11;
  void clear_number_of_persons_injured() ;
  ::int32_t number_of_persons_injured() const;
  void set_number_of_persons_injured(::int32_t value);

  private:
  ::int32_t _internal_number_of_persons_injured() const;
  void _internal_set_number_of_persons_injured(::int32_t value);

  public:
  // int32 number_of_persons_killed = 12;
  void clear_number_of_persons_killed() ;
  ::int32_t number_of_persons_killed() const;
  void set_number_of_persons_killed(::int32_t value);

  private:
  ::int32_t _internal_number_of_persons_killed() const;
  void _internal_set_number_of_persons_killed(::int32_t value);

  public:
  // int32 number_of_pedestrians_injured = 13;
  void clear_number_of_pedestrians_injured() ;
  ::int32_t number_of_pedestrians_injured() const;
  void set_number_of_pedestrians_injured(::int32_t value);

  private:
  ::int32_t _internal_number_of_pedestrians_injured() const;
  void _internal_set_number_of_pedestrians_injured(::int32_t value);

  public:
  // int32 number_of_pedestrians_killed = 14;
  void clear_number_of_pedestrians_killed() ;
  ::int32_t number_of_pedestrians_killed() const;
  void set_number_of_pedestrians_killed(::int32_t value);

  private:
  ::int32_t _internal_number_of_pedestrians_killed() const;
  void _internal_set_number_of_pedestrians_killed(::int32_t value);

  public:
  // int32 number_of_cyclist_injured = 15;
  void clear_number_of_cyclist_injured() ;
  ::int32_t number_of_cyclist_injured() const;
  void set_number_of_cyclist_injured(::int32_t value);

  private:
  ::int32_t _internal_number_of_cyclist_injured() const;
  void _internal_set_number_of_cyclist_injured(::int32_t value);

  public:
  // int32 number_of_cyclist_killed = 16;
  void clear_number_of_cyclist_killed() ;
  ::int32_t number_of_cyclist_killed() const;
  void set_number_of_cyclist_killed(::int32_t value);

  private:
  ::int32_t _internal_number_of_cyclist_killed() const;
  void _internal_set_number_of_cyclist_killed(::int32_t value);

  public:
  // int32 number_of_motorist_injured = 17;
  void clear_number_of_motorist_injured() ;
  ::int32_t number_of_motorist_injured() const;
  void set_number_of_motorist_injured(::int32_t value);

  private:
  ::int32_t _internal_number_of_motorist_injured() const;
  void _internal_set_number_of_motorist_injured(::int32_t value);

  public:
  // int32 number_of_motorist_killed = 18;
  void clear_number_of_motorist_killed() ;
  ::int32_t number_of_motorist_killed() const;
  void set_number_of_motorist_killed(::int32_t value);

  private:
  ::int32_t _internal_number_of_motorist_killed() const;
  void _internal_set_number_of_motorist_killed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.CollisionData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 29, 0,
      393, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CollisionData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr crash_date_;
    ::google::protobuf::internal::ArenaStringPtr crash_time_;
    ::google::protobuf::internal::ArenaStringPtr borough_;
    ::google::protobuf::internal::ArenaStringPtr zip_code_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr on_street_name_;
    ::google::protobuf::internal::ArenaStringPtr cross_street_name_;
    ::google::protobuf::internal::ArenaStringPtr off_street_name_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_1_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_2_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_3_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_4_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_5_;
    ::google::protobuf::internal::ArenaStringPtr collision_id_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_1_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_2_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_3_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_4_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_5_;
    double latitude_;
    double longitude_;
    ::int32_t number_of_persons_injured_;
    ::int32_t number_of_persons_killed_;
    ::int32_t number_of_pedestrians_injured_;
    ::int32_t number_of_pedestrians_killed_;
    ::int32_t number_of_cyclist_injured_;
    ::int32_t number_of_cyclist_killed_;
    ::int32_t number_of_motorist_injured_;
    ::int32_t number_of_motorist_killed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class AnalysisRecord final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.AnalysisRecord) */ {
 public:
  inline AnalysisRecord() : AnalysisRecord(nullptr) {}
  ~AnalysisRecord() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalysisRecord* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalysisRecord));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalysisRecord(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalysisRecord(const AnalysisRecord& from) : AnalysisRecord(nullptr, from) {}
  inline AnalysisRecord(AnalysisRecord&& from) noexcept
      : AnalysisRecord(nullptr, std::move(from)) {}
  inline AnalysisRecord& operator=(const AnalysisRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalysisRecord& operator=(AnalysisRecord&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalysisRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalysisRecord* internal_default_instance() {
    return reinterpret_cast<const AnalysisRecord*>(
        &_AnalysisRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AnalysisRecord& a, AnalysisRecord& b) { a.Swap(&b); }
  inline void Swap(AnalysisRecord* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalysisRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalysisRecord* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalysisRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalysisRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalysisRecord& from) { AnalysisRecord::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalysisRecord* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.AnalysisRecord"; }

 protected:
  explicit AnalysisRecord(::google::protobuf::Arena* arena);
  AnalysisRecord(::google::protobuf::Arena* arena, const AnalysisRecord& from);
  AnalysisRecord(::google::protobuf::Arena* arena, AnalysisRecord&& from) noexcept
      : AnalysisRecord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCrashDateFieldNumber = 1,
    kBoroughFieldNumber = 2,
    kZipCodeFieldNumber = 3,
    kPersonsInjuredFieldNumber = 4,
    kPersonsKilledFieldNumber = 5,
  };
  // string crash_date = 1;
  void clear_crash_date() ;
  const std::string& crash_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crash_date(Arg_&& arg, Args_... args);
  std::string* mutable_crash_date();
  PROTOBUF_NODISCARD std::string* release_crash_date();
  void set_allocated_crash_date(std::string* value);

  private:
  const std::string& _internal_crash_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crash_date(
      const std::string& value);
  std::string* _internal_mutable_crash_date();

  public:
  // string borough = 2;
  void clear_borough() ;
  const std::string& borough() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borough(Arg_&& arg, Args_... args);
  std::string* mutable_borough();
  PROTOBUF_NODISCARD std::string* release_borough();
  void set_allocated_borough(std::string* value);

  private:
  const std::string& _internal_borough() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borough(
      const std::string& value);
  std::string* _internal_mutable_borough();

  public:
  // string zip_code = 3;
  void clear_zip_code() ;
  const std::string& zip_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zip_code(Arg_&& arg, Args_... args);
  std::string* mutable_zip_code();
  PROTOBUF_NODISCARD std::string* release_zip_code();
  void set_allocated_zip_code(std::string* value);

  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(
      const std::string& value);
  std::string* _internal_mutable_zip_code();

  public:
  // int32 persons_injured = 4;
  void clear_persons_injured() ;
  ::int32_t persons_injured() const;
  void set_persons_injured(::int32_t value);

  private:
  ::int32_t _internal_persons_injured() const;
  void _internal_set_persons_injured(::int32_t value);

  public:
  // int32 persons_killed = 5;
  void clear_persons_killed() ;
  ::int32_t persons_killed() const;
  void set_persons_killed(::int32_t value);

  private:
  ::int32_t _internal_persons_killed() const;
  void _internal_set_persons_killed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mini2.AnalysisRecord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalysisRecord& from_msg);
    ::google::protobuf::internal::ArenaStringPtr crash_date_;
    ::google::protobuf::internal::ArenaStringPtr borough_;
    ::google::protobuf::internal::ArenaStringPtr zip_code_;
    ::int32_t persons_injured_;
    ::int32_t persons_killed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class StealResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.StealResponse) */ {
 public:
  inline StealResponse() : StealResponse(nullptr) {}
  ~StealResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StealResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StealResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StealResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StealResponse(const StealResponse& from) : StealResponse(nullptr, from) {}
  inline StealResponse(StealResponse&& from) noexcept
      : StealResponse(nullptr, std::move(from)) {}
  inline StealResponse& operator=(const StealResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StealResponse& operator=(StealResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StealResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StealResponse* internal_default_instance() {
    return reinterpret_cast<const StealResponse*>(
        &_StealResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(StealResponse& a, StealResponse& b) { a.Swap(&b); }
  inline void Swap(StealResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StealResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StealResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StealResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StealResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StealResponse& from) { StealResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StealResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.StealResponse"; }

 protected:
  explicit StealResponse(::google::protobuf::Arena* arena);
  StealResponse(::google::protobuf::Arena* arena, const StealResponse& from);
  StealResponse(::google::protobuf::Arena* arena, StealResponse&& from) noexcept
      : StealResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStolenMessagesFieldNumber = 1,
  };
  // repeated .mini2.Message stolen_messages = 1;
  int stolen_messages_size() const;
  private:
  int _internal_stolen_messages_size() const;

  public:
  void clear_stolen_messages() ;
  ::mini2::Message* mutable_stolen_messages(int index);
  ::google::protobuf::RepeatedPtrField<::mini2::Message>* mutable_stolen_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::mini2::Message>& _internal_stolen_messages() const;
  ::google::protobuf::RepeatedPtrField<::mini2::Message>* _internal_mutable_stolen_messages();
  public:
  const ::mini2::Message& stolen_messages(int index) const;
  ::mini2::Message* add_stolen_messages();
  const ::google::protobuf::RepeatedPtrField<::mini2::Message>& stolen_messages() const;
  // @@protoc_insertion_point(class_scope:mini2.StealResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StealResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mini2::Message > stolen_messages_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};
// -------------------------------------------------------------------

class CollisionBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mini2.CollisionBatch) */ {
 public:
  inline CollisionBatch() : CollisionBatch(nullptr) {}
  ~CollisionBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CollisionBatch* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CollisionBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CollisionBatch(
      ::google::protobuf::internal::ConstantInitialized);

  inline CollisionBatch(const CollisionBatch& from) : CollisionBatch(nullptr, from) {}
  inline CollisionBatch(CollisionBatch&& from) noexcept
      : CollisionBatch(nullptr, std::move(from)) {}
  inline CollisionBatch& operator=(const CollisionBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionBatch& operator=(CollisionBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionBatch* internal_default_instance() {
    return reinterpret_cast<const CollisionBatch*>(
        &_CollisionBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CollisionBatch& a, CollisionBatch& b) { a.Swap(&b); }
  inline void Swap(CollisionBatch* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionBatch* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CollisionBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollisionBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CollisionBatch& from) { CollisionBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CollisionBatch* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mini2.CollisionBatch"; }

 protected:
  explicit CollisionBatch(::google::protobuf::Arena* arena);
  CollisionBatch(::google::protobuf::Arena* arena, const CollisionBatch& from);
  CollisionBatch(::google::protobuf::Arena* arena, CollisionBatch&& from) noexcept
      : CollisionBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCollisionsFieldNumber = 1,
  };
  // repeated .mini2.CollisionData collisions = 1;
  int collisions_size() const;
  private:
  int _internal_collisions_size() const;

  public:
  void clear_collisions() ;
  ::mini2::CollisionData* mutable_collisions(int index);
  ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>* mutable_collisions();

  private:
  const ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>& _internal_collisions() const;
  ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>* _internal_mutable_collisions();
  public:
  const ::mini2::CollisionData& collisions(int index) const;
  ::mini2::CollisionData* add_collisions();
  const ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>& collisions() const;
  // @@protoc_insertion_point(class_scope:mini2.CollisionBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CollisionBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mini2::CollisionData > collisions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mini3_2fproto_2fmini2_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CollisionData

// string crash_date = 1;
inline void CollisionData::clear_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.ClearToEmpty();
}
inline const std::string& CollisionData::crash_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.crash_date)
  return _internal_crash_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_crash_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.crash_date)
}
inline std::string* CollisionData::mutable_crash_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crash_date();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.crash_date)
  return _s;
}
inline const std::string& CollisionData::_internal_crash_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_date_.Get();
}
inline void CollisionData::_internal_set_crash_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crash_date_.Mutable( GetArena());
}
inline std::string* CollisionData::release_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.crash_date)
  return _impl_.crash_date_.Release();
}
inline void CollisionData::set_allocated_crash_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.crash_date_.IsDefault()) {
    _impl_.crash_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.crash_date)
}

// string crash_time = 2;
inline void CollisionData::clear_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.ClearToEmpty();
}
inline const std::string& CollisionData::crash_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.crash_time)
  return _internal_crash_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_crash_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.crash_time)
}
inline std::string* CollisionData::mutable_crash_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crash_time();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.crash_time)
  return _s;
}
inline const std::string& CollisionData::_internal_crash_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_time_.Get();
}
inline void CollisionData::_internal_set_crash_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crash_time_.Mutable( GetArena());
}
inline std::string* CollisionData::release_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.crash_time)
  return _impl_.crash_time_.Release();
}
inline void CollisionData::set_allocated_crash_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.crash_time_.IsDefault()) {
    _impl_.crash_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.crash_time)
}

// string borough = 3;
inline void CollisionData::clear_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.ClearToEmpty();
}
inline const std::string& CollisionData::borough() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.borough)
  return _internal_borough();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_borough(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.borough)
}
inline std::string* CollisionData::mutable_borough() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borough();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.borough)
  return _s;
}
inline const std::string& CollisionData::_internal_borough() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.borough_.Get();
}
inline void CollisionData::_internal_set_borough(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.borough_.Mutable( GetArena());
}
inline std::string* CollisionData::release_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.borough)
  return _impl_.borough_.Release();
}
inline void CollisionData::set_allocated_borough(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.borough_.IsDefault()) {
    _impl_.borough_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.borough)
}

// string zip_code = 4;
inline void CollisionData::clear_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.ClearToEmpty();
}
inline const std::string& CollisionData::zip_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.zip_code)
  return _internal_zip_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_zip_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.zip_code)
}
inline std::string* CollisionData::mutable_zip_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.zip_code)
  return _s;
}
inline const std::string& CollisionData::_internal_zip_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zip_code_.Get();
}
inline void CollisionData::_internal_set_zip_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zip_code_.Mutable( GetArena());
}
inline std::string* CollisionData::release_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.zip_code)
  return _impl_.zip_code_.Release();
}
inline void CollisionData::set_allocated_zip_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zip_code_.IsDefault()) {
    _impl_.zip_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.zip_code)
}

// double latitude = 5;
inline void CollisionData::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline double CollisionData::latitude() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.latitude)
  return _internal_latitude();
}
inline void CollisionData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.latitude)
}
inline double CollisionData::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void CollisionData::_internal_set_latitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// double longitude = 6;
inline void CollisionData::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline double CollisionData::longitude() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.longitude)
  return _internal_longitude();
}
inline void CollisionData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.longitude)
}
inline double CollisionData::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void CollisionData::_internal_set_longitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// string location = 7;
inline void CollisionData::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& CollisionData::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.location)
}
inline std::string* CollisionData::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.location)
  return _s;
}
inline const std::string& CollisionData::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void CollisionData::_internal_set_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* CollisionData::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.location)
  return _impl_.location_.Release();
}
inline void CollisionData::set_allocated_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.location)
}

// string on_street_name = 8;
inline void CollisionData::clear_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.ClearToEmpty();
}
inline const std::string& CollisionData::on_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.on_street_name)
  return _internal_on_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_on_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.on_street_name)
}
inline std::string* CollisionData::mutable_on_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_on_street_name();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.on_street_name)
  return _s;
}
inline const std::string& CollisionData::_internal_on_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.on_street_name_.Get();
}
inline void CollisionData::_internal_set_on_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.on_street_name_.Mutable( GetArena());
}
inline std::string* CollisionData::release_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.on_street_name)
  return _impl_.on_street_name_.Release();
}
inline void CollisionData::set_allocated_on_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.on_street_name_.IsDefault()) {
    _impl_.on_street_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.on_street_name)
}

// string cross_street_name = 9;
inline void CollisionData::clear_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.ClearToEmpty();
}
inline const std::string& CollisionData::cross_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.cross_street_name)
  return _internal_cross_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_cross_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.cross_street_name)
}
inline std::string* CollisionData::mutable_cross_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cross_street_name();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.cross_street_name)
  return _s;
}
inline const std::string& CollisionData::_internal_cross_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_street_name_.Get();
}
inline void CollisionData::_internal_set_cross_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cross_street_name_.Mutable( GetArena());
}
inline std::string* CollisionData::release_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.cross_street_name)
  return _impl_.cross_street_name_.Release();
}
inline void CollisionData::set_allocated_cross_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cross_street_name_.IsDefault()) {
    _impl_.cross_street_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.cross_street_name)
}

// string off_street_name = 10;
inline void CollisionData::clear_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.ClearToEmpty();
}
inline const std::string& CollisionData::off_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.off_street_name)
  return _internal_off_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_off_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.off_street_name)
}
inline std::string* CollisionData::mutable_off_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_off_street_name();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.off_street_name)
  return _s;
}
inline const std::string& CollisionData::_internal_off_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.off_street_name_.Get();
}
inline void CollisionData::_internal_set_off_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.off_street_name_.Mutable( GetArena());
}
inline std::string* CollisionData::release_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.off_street_name)
  return _impl_.off_street_name_.Release();
}
inline void CollisionData::set_allocated_off_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.off_street_name_.IsDefault()) {
    _impl_.off_street_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.off_street_name)
}

// int32 number_of_persons_injured = 11;
inline void CollisionData::clear_number_of_persons_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_injured_ = 0;
}
inline ::int32_t CollisionData::number_of_persons_injured() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_persons_injured)
  return _internal_number_of_persons_injured();
}
inline void CollisionData::set_number_of_persons_injured(::int32_t value) {
  _internal_set_number_of_persons_injured(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_persons_injured)
}
inline ::int32_t CollisionData::_internal_number_of_persons_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_persons_injured_;
}
inline void CollisionData::_internal_set_number_of_persons_injured(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_injured_ = value;
}

// int32 number_of_persons_killed = 12;
inline void CollisionData::clear_number_of_persons_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_killed_ = 0;
}
inline ::int32_t CollisionData::number_of_persons_killed() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_persons_killed)
  return _internal_number_of_persons_killed();
}
inline void CollisionData::set_number_of_persons_killed(::int32_t value) {
  _internal_set_number_of_persons_killed(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_persons_killed)
}
inline ::int32_t CollisionData::_internal_number_of_persons_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_persons_killed_;
}
inline void CollisionData::_internal_set_number_of_persons_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_killed_ = value;
}

// int32 number_of_pedestrians_injured = 13;
inline void CollisionData::clear_number_of_pedestrians_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_injured_ = 0;
}
inline ::int32_t CollisionData::number_of_pedestrians_injured() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_pedestrians_injured)
  return _internal_number_of_pedestrians_injured();
}
inline void CollisionData::set_number_of_pedestrians_injured(::int32_t value) {
  _internal_set_number_of_pedestrians_injured(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_pedestrians_injured)
}
inline ::int32_t CollisionData::_internal_number_of_pedestrians_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_pedestrians_injured_;
}
inline void CollisionData::_internal_set_number_of_pedestrians_injured(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_injured_ = value;
}

// int32 number_of_pedestrians_killed = 14;
inline void CollisionData::clear_number_of_pedestrians_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_killed_ = 0;
}
inline ::int32_t CollisionData::number_of_pedestrians_killed() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_pedestrians_killed)
  return _internal_number_of_pedestrians_killed();
}
inline void CollisionData::set_number_of_pedestrians_killed(::int32_t value) {
  _internal_set_number_of_pedestrians_killed(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_pedestrians_killed)
}
inline ::int32_t CollisionData::_internal_number_of_pedestrians_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_pedestrians_killed_;
}
inline void CollisionData::_internal_set_number_of_pedestrians_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_killed_ = value;
}

// int32 number_of_cyclist_injured = 15;
inline void CollisionData::clear_number_of_cyclist_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_injured_ = 0;
}
inline ::int32_t CollisionData::number_of_cyclist_injured() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_cyclist_injured)
  return _internal_number_of_cyclist_injured();
}
inline void CollisionData::set_number_of_cyclist_injured(::int32_t value) {
  _internal_set_number_of_cyclist_injured(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_cyclist_injured)
}
inline ::int32_t CollisionData::_internal_number_of_cyclist_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_cyclist_injured_;
}
inline void CollisionData::_internal_set_number_of_cyclist_injured(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_injured_ = value;
}

// int32 number_of_cyclist_killed = 16;
inline void CollisionData::clear_number_of_cyclist_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_killed_ = 0;
}
inline ::int32_t CollisionData::number_of_cyclist_killed() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_cyclist_killed)
  return _internal_number_of_cyclist_killed();
}
inline void CollisionData::set_number_of_cyclist_killed(::int32_t value) {
  _internal_set_number_of_cyclist_killed(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_cyclist_killed)
}
inline ::int32_t CollisionData::_internal_number_of_cyclist_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_cyclist_killed_;
}
inline void CollisionData::_internal_set_number_of_cyclist_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_killed_ = value;
}

// int32 number_of_motorist_injured = 17;
inline void CollisionData::clear_number_of_motorist_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_injured_ = 0;
}
inline ::int32_t CollisionData::number_of_motorist_injured() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_motorist_injured)
  return _internal_number_of_motorist_injured();
}
inline void CollisionData::set_number_of_motorist_injured(::int32_t value) {
  _internal_set_number_of_motorist_injured(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_motorist_injured)
}
inline ::int32_t CollisionData::_internal_number_of_motorist_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_motorist_injured_;
}
inline void CollisionData::_internal_set_number_of_motorist_injured(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_injured_ = value;
}

// int32 number_of_motorist_killed = 18;
inline void CollisionData::clear_number_of_motorist_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_killed_ = 0;
}
inline ::int32_t CollisionData::number_of_motorist_killed() const {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.number_of_motorist_killed)
  return _internal_number_of_motorist_killed();
}
inline void CollisionData::set_number_of_motorist_killed(::int32_t value) {
  _internal_set_number_of_motorist_killed(value);
  // @@protoc_insertion_point(field_set:mini2.CollisionData.number_of_motorist_killed)
}
inline ::int32_t CollisionData::_internal_number_of_motorist_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_motorist_killed_;
}
inline void CollisionData::_internal_set_number_of_motorist_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_killed_ = value;
}

// string contributing_factor_vehicle_1 = 19;
inline void CollisionData::clear_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.ClearToEmpty();
}
inline const std::string& CollisionData::contributing_factor_vehicle_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.contributing_factor_vehicle_1)
  return _internal_contributing_factor_vehicle_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_contributing_factor_vehicle_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.contributing_factor_vehicle_1)
}
inline std::string* CollisionData::mutable_contributing_factor_vehicle_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_1();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.contributing_factor_vehicle_1)
  return _s;
}
inline const std::string& CollisionData::_internal_contributing_factor_vehicle_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_1_.Get();
}
inline void CollisionData::_internal_set_contributing_factor_vehicle_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_1_.Mutable( GetArena());
}
inline std::string* CollisionData::release_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.contributing_factor_vehicle_1)
  return _impl_.contributing_factor_vehicle_1_.Release();
}
inline void CollisionData::set_allocated_contributing_factor_vehicle_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributing_factor_vehicle_1_.IsDefault()) {
    _impl_.contributing_factor_vehicle_1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.contributing_factor_vehicle_1)
}

// string contributing_factor_vehicle_2 = 20;
inline void CollisionData::clear_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.ClearToEmpty();
}
inline const std::string& CollisionData::contributing_factor_vehicle_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.contributing_factor_vehicle_2)
  return _internal_contributing_factor_vehicle_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_contributing_factor_vehicle_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.contributing_factor_vehicle_2)
}
inline std::string* CollisionData::mutable_contributing_factor_vehicle_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_2();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.contributing_factor_vehicle_2)
  return _s;
}
inline const std::string& CollisionData::_internal_contributing_factor_vehicle_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_2_.Get();
}
inline void CollisionData::_internal_set_contributing_factor_vehicle_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_2_.Mutable( GetArena());
}
inline std::string* CollisionData::release_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.contributing_factor_vehicle_2)
  return _impl_.contributing_factor_vehicle_2_.Release();
}
inline void CollisionData::set_allocated_contributing_factor_vehicle_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributing_factor_vehicle_2_.IsDefault()) {
    _impl_.contributing_factor_vehicle_2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.contributing_factor_vehicle_2)
}

// string contributing_factor_vehicle_3 = 21;
inline void CollisionData::clear_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.ClearToEmpty();
}
inline const std::string& CollisionData::contributing_factor_vehicle_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.contributing_factor_vehicle_3)
  return _internal_contributing_factor_vehicle_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_contributing_factor_vehicle_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.contributing_factor_vehicle_3)
}
inline std::string* CollisionData::mutable_contributing_factor_vehicle_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_3();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.contributing_factor_vehicle_3)
  return _s;
}
inline const std::string& CollisionData::_internal_contributing_factor_vehicle_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_3_.Get();
}
inline void CollisionData::_internal_set_contributing_factor_vehicle_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_3_.Mutable( GetArena());
}
inline std::string* CollisionData::release_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.contributing_factor_vehicle_3)
  return _impl_.contributing_factor_vehicle_3_.Release();
}
inline void CollisionData::set_allocated_contributing_factor_vehicle_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributing_factor_vehicle_3_.IsDefault()) {
    _impl_.contributing_factor_vehicle_3_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.contributing_factor_vehicle_3)
}

// string contributing_factor_vehicle_4 = 22;
inline void CollisionData::clear_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.ClearToEmpty();
}
inline const std::string& CollisionData::contributing_factor_vehicle_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.contributing_factor_vehicle_4)
  return _internal_contributing_factor_vehicle_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_contributing_factor_vehicle_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.contributing_factor_vehicle_4)
}
inline std::string* CollisionData::mutable_contributing_factor_vehicle_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_4();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.contributing_factor_vehicle_4)
  return _s;
}
inline const std::string& CollisionData::_internal_contributing_factor_vehicle_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_4_.Get();
}
inline void CollisionData::_internal_set_contributing_factor_vehicle_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_4_.Mutable( GetArena());
}
inline std::string* CollisionData::release_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.contributing_factor_vehicle_4)
  return _impl_.contributing_factor_vehicle_4_.Release();
}
inline void CollisionData::set_allocated_contributing_factor_vehicle_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributing_factor_vehicle_4_.IsDefault()) {
    _impl_.contributing_factor_vehicle_4_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.contributing_factor_vehicle_4)
}

// string contributing_factor_vehicle_5 = 23;
inline void CollisionData::clear_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.ClearToEmpty();
}
inline const std::string& CollisionData::contributing_factor_vehicle_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.contributing_factor_vehicle_5)
  return _internal_contributing_factor_vehicle_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_contributing_factor_vehicle_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.contributing_factor_vehicle_5)
}
inline std::string* CollisionData::mutable_contributing_factor_vehicle_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_5();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.contributing_factor_vehicle_5)
  return _s;
}
inline const std::string& CollisionData::_internal_contributing_factor_vehicle_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_5_.Get();
}
inline void CollisionData::_internal_set_contributing_factor_vehicle_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_5_.Mutable( GetArena());
}
inline std::string* CollisionData::release_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.contributing_factor_vehicle_5)
  return _impl_.contributing_factor_vehicle_5_.Release();
}
inline void CollisionData::set_allocated_contributing_factor_vehicle_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributing_factor_vehicle_5_.IsDefault()) {
    _impl_.contributing_factor_vehicle_5_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.contributing_factor_vehicle_5)
}

// string collision_id = 24;
inline void CollisionData::clear_collision_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_.ClearToEmpty();
}
inline const std::string& CollisionData::collision_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.collision_id)
  return _internal_collision_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_collision_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.collision_id)
}
inline std::string* CollisionData::mutable_collision_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_collision_id();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.collision_id)
  return _s;
}
inline const std::string& CollisionData::_internal_collision_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collision_id_.Get();
}
inline void CollisionData::_internal_set_collision_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_collision_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.collision_id_.Mutable( GetArena());
}
inline std::string* CollisionData::release_collision_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.collision_id)
  return _impl_.collision_id_.Release();
}
inline void CollisionData::set_allocated_collision_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.collision_id_.IsDefault()) {
    _impl_.collision_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.collision_id)
}

// string vehicle_type_code_1 = 25;
inline void CollisionData::clear_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.ClearToEmpty();
}
inline const std::string& CollisionData::vehicle_type_code_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.vehicle_type_code_1)
  return _internal_vehicle_type_code_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_vehicle_type_code_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.vehicle_type_code_1)
}
inline std::string* CollisionData::mutable_vehicle_type_code_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_1();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.vehicle_type_code_1)
  return _s;
}
inline const std::string& CollisionData::_internal_vehicle_type_code_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_1_.Get();
}
inline void CollisionData::_internal_set_vehicle_type_code_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_1_.Mutable( GetArena());
}
inline std::string* CollisionData::release_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.vehicle_type_code_1)
  return _impl_.vehicle_type_code_1_.Release();
}
inline void CollisionData::set_allocated_vehicle_type_code_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vehicle_type_code_1_.IsDefault()) {
    _impl_.vehicle_type_code_1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.vehicle_type_code_1)
}

// string vehicle_type_code_2 = 26;
inline void CollisionData::clear_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.ClearToEmpty();
}
inline const std::string& CollisionData::vehicle_type_code_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.vehicle_type_code_2)
  return _internal_vehicle_type_code_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_vehicle_type_code_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.vehicle_type_code_2)
}
inline std::string* CollisionData::mutable_vehicle_type_code_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_2();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.vehicle_type_code_2)
  return _s;
}
inline const std::string& CollisionData::_internal_vehicle_type_code_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_2_.Get();
}
inline void CollisionData::_internal_set_vehicle_type_code_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_2_.Mutable( GetArena());
}
inline std::string* CollisionData::release_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.vehicle_type_code_2)
  return _impl_.vehicle_type_code_2_.Release();
}
inline void CollisionData::set_allocated_vehicle_type_code_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vehicle_type_code_2_.IsDefault()) {
    _impl_.vehicle_type_code_2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.vehicle_type_code_2)
}

// string vehicle_type_code_3 = 27;
inline void CollisionData::clear_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.ClearToEmpty();
}
inline const std::string& CollisionData::vehicle_type_code_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.vehicle_type_code_3)
  return _internal_vehicle_type_code_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_vehicle_type_code_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.vehicle_type_code_3)
}
inline std::string* CollisionData::mutable_vehicle_type_code_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_3();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.vehicle_type_code_3)
  return _s;
}
inline const std::string& CollisionData::_internal_vehicle_type_code_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_3_.Get();
}
inline void CollisionData::_internal_set_vehicle_type_code_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_3_.Mutable( GetArena());
}
inline std::string* CollisionData::release_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.vehicle_type_code_3)
  return _impl_.vehicle_type_code_3_.Release();
}
inline void CollisionData::set_allocated_vehicle_type_code_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vehicle_type_code_3_.IsDefault()) {
    _impl_.vehicle_type_code_3_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.vehicle_type_code_3)
}

// string vehicle_type_code_4 = 28;
inline void CollisionData::clear_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.ClearToEmpty();
}
inline const std::string& CollisionData::vehicle_type_code_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.vehicle_type_code_4)
  return _internal_vehicle_type_code_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_vehicle_type_code_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.vehicle_type_code_4)
}
inline std::string* CollisionData::mutable_vehicle_type_code_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_4();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.vehicle_type_code_4)
  return _s;
}
inline const std::string& CollisionData::_internal_vehicle_type_code_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_4_.Get();
}
inline void CollisionData::_internal_set_vehicle_type_code_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_4_.Mutable( GetArena());
}
inline std::string* CollisionData::release_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.vehicle_type_code_4)
  return _impl_.vehicle_type_code_4_.Release();
}
inline void CollisionData::set_allocated_vehicle_type_code_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vehicle_type_code_4_.IsDefault()) {
    _impl_.vehicle_type_code_4_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.vehicle_type_code_4)
}

// string vehicle_type_code_5 = 29;
inline void CollisionData::clear_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.ClearToEmpty();
}
inline const std::string& CollisionData::vehicle_type_code_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionData.vehicle_type_code_5)
  return _internal_vehicle_type_code_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CollisionData::set_vehicle_type_code_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.CollisionData.vehicle_type_code_5)
}
inline std::string* CollisionData::mutable_vehicle_type_code_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_5();
  // @@protoc_insertion_point(field_mutable:mini2.CollisionData.vehicle_type_code_5)
  return _s;
}
inline const std::string& CollisionData::_internal_vehicle_type_code_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_5_.Get();
}
inline void CollisionData::_internal_set_vehicle_type_code_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.Set(value, GetArena());
}
inline std::string* CollisionData::_internal_mutable_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_5_.Mutable( GetArena());
}
inline std::string* CollisionData::release_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.CollisionData.vehicle_type_code_5)
  return _impl_.vehicle_type_code_5_.Release();
}
inline void CollisionData::set_allocated_vehicle_type_code_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vehicle_type_code_5_.IsDefault()) {
    _impl_.vehicle_type_code_5_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.CollisionData.vehicle_type_code_5)
}

// -------------------------------------------------------------------

// AnalysisRecord

// string crash_date = 1;
inline void AnalysisRecord::clear_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.ClearToEmpty();
}
inline const std::string& AnalysisRecord::crash_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.AnalysisRecord.crash_date)
  return _internal_crash_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalysisRecord::set_crash_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.AnalysisRecord.crash_date)
}
inline std::string* AnalysisRecord::mutable_crash_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crash_date();
  // @@protoc_insertion_point(field_mutable:mini2.AnalysisRecord.crash_date)
  return _s;
}
inline const std::string& AnalysisRecord::_internal_crash_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_date_.Get();
}
inline void AnalysisRecord::_internal_set_crash_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(value, GetArena());
}
inline std::string* AnalysisRecord::_internal_mutable_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crash_date_.Mutable( GetArena());
}
inline std::string* AnalysisRecord::release_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.AnalysisRecord.crash_date)
  return _impl_.crash_date_.Release();
}
inline void AnalysisRecord::set_allocated_crash_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.crash_date_.IsDefault()) {
    _impl_.crash_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.AnalysisRecord.crash_date)
}

// string borough = 2;
inline void AnalysisRecord::clear_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.ClearToEmpty();
}
inline const std::string& AnalysisRecord::borough() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.AnalysisRecord.borough)
  return _internal_borough();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalysisRecord::set_borough(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.AnalysisRecord.borough)
}
inline std::string* AnalysisRecord::mutable_borough() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borough();
  // @@protoc_insertion_point(field_mutable:mini2.AnalysisRecord.borough)
  return _s;
}
inline const std::string& AnalysisRecord::_internal_borough() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.borough_.Get();
}
inline void AnalysisRecord::_internal_set_borough(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(value, GetArena());
}
inline std::string* AnalysisRecord::_internal_mutable_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.borough_.Mutable( GetArena());
}
inline std::string* AnalysisRecord::release_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.AnalysisRecord.borough)
  return _impl_.borough_.Release();
}
inline void AnalysisRecord::set_allocated_borough(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.borough_.IsDefault()) {
    _impl_.borough_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.AnalysisRecord.borough)
}

// string zip_code = 3;
inline void AnalysisRecord::clear_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.ClearToEmpty();
}
inline const std::string& AnalysisRecord::zip_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.AnalysisRecord.zip_code)
  return _internal_zip_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalysisRecord::set_zip_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.AnalysisRecord.zip_code)
}
inline std::string* AnalysisRecord::mutable_zip_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:mini2.AnalysisRecord.zip_code)
  return _s;
}
inline const std::string& AnalysisRecord::_internal_zip_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zip_code_.Get();
}
inline void AnalysisRecord::_internal_set_zip_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(value, GetArena());
}
inline std::string* AnalysisRecord::_internal_mutable_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zip_code_.Mutable( GetArena());
}
inline std::string* AnalysisRecord::release_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.AnalysisRecord.zip_code)
  return _impl_.zip_code_.Release();
}
inline void AnalysisRecord::set_allocated_zip_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zip_code_.IsDefault()) {
    _impl_.zip_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.AnalysisRecord.zip_code)
}

// int32 persons_injured = 4;
inline void AnalysisRecord::clear_persons_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persons_injured_ = 0;
}
inline ::int32_t AnalysisRecord::persons_injured() const {
  // @@protoc_insertion_point(field_get:mini2.AnalysisRecord.persons_injured)
  return _internal_persons_injured();
}
inline void AnalysisRecord::set_persons_injured(::int32_t value) {
  _internal_set_persons_injured(value);
  // @@protoc_insertion_point(field_set:mini2.AnalysisRecord.persons_injured)
}
inline ::int32_t AnalysisRecord::_internal_persons_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persons_injured_;
}
inline void AnalysisRecord::_internal_set_persons_injured(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persons_injured_ = value;
}

// int32 persons_killed = 5;
inline void AnalysisRecord::clear_persons_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persons_killed_ = 0;
}
inline ::int32_t AnalysisRecord::persons_killed() const {
  // @@protoc_insertion_point(field_get:mini2.AnalysisRecord.persons_killed)
  return _internal_persons_killed();
}
inline void AnalysisRecord::set_persons_killed(::int32_t value) {
  _internal_set_persons_killed(value);
  // @@protoc_insertion_point(field_set:mini2.AnalysisRecord.persons_killed)
}
inline ::int32_t AnalysisRecord::_internal_persons_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persons_killed_;
}
inline void AnalysisRecord::_internal_set_persons_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persons_killed_ = value;
}

// -------------------------------------------------------------------

// CollisionBatch

// repeated .mini2.CollisionData collisions = 1;
inline int CollisionBatch::_internal_collisions_size() const {
  return _internal_collisions().size();
}
inline int CollisionBatch::collisions_size() const {
  return _internal_collisions_size();
}
inline void CollisionBatch::clear_collisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collisions_.Clear();
}
inline ::mini2::CollisionData* CollisionBatch::mutable_collisions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mini2.CollisionBatch.collisions)
  return _internal_mutable_collisions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>* CollisionBatch::mutable_collisions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mini2.CollisionBatch.collisions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_collisions();
}
inline const ::mini2::CollisionData& CollisionBatch::collisions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.CollisionBatch.collisions)
  return _internal_collisions().Get(index);
}
inline ::mini2::CollisionData* CollisionBatch::add_collisions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mini2::CollisionData* _add = _internal_mutable_collisions()->Add();
  // @@protoc_insertion_point(field_add:mini2.CollisionBatch.collisions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>& CollisionBatch::collisions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mini2.CollisionBatch.collisions)
  return _internal_collisions();
}
inline const ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>&
CollisionBatch::_internal_collisions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collisions_;
}
inline ::google::protobuf::RepeatedPtrField<::mini2::CollisionData>*
CollisionBatch::_internal_mutable_collisions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.collisions_;
}

// -------------------------------------------------------------------

// RiskAssessment

// string borough = 1;
inline void RiskAssessment::clear_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.ClearToEmpty();
}
inline const std::string& RiskAssessment::borough() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.RiskAssessment.borough)
  return _internal_borough();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RiskAssessment::set_borough(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.RiskAssessment.borough)
}
inline std::string* RiskAssessment::mutable_borough() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borough();
  // @@protoc_insertion_point(field_mutable:mini2.RiskAssessment.borough)
  return _s;
}
inline const std::string& RiskAssessment::_internal_borough() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.borough_.Get();
}
inline void RiskAssessment::_internal_set_borough(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(value, GetArena());
}
inline std::string* RiskAssessment::_internal_mutable_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.borough_.Mutable( GetArena());
}
inline std::string* RiskAssessment::release_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.RiskAssessment.borough)
  return _impl_.borough_.Release();
}
inline void RiskAssessment::set_allocated_borough(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.borough_.IsDefault()) {
    _impl_.borough_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.RiskAssessment.borough)
}

// string zip_code = 2;
inline void RiskAssessment::clear_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.ClearToEmpty();
}
inline const std::string& RiskAssessment::zip_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.RiskAssessment.zip_code)
  return _internal_zip_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RiskAssessment::set_zip_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.RiskAssessment.zip_code)
}
inline std::string* RiskAssessment::mutable_zip_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:mini2.RiskAssessment.zip_code)
  return _s;
}
inline const std::string& RiskAssessment::_internal_zip_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zip_code_.Get();
}
inline void RiskAssessment::_internal_set_zip_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(value, GetArena());
}
inline std::string* RiskAssessment::_internal_mutable_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zip_code_.Mutable( GetArena());
}
inline std::string* RiskAssessment::release_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.RiskAssessment.zip_code)
  return _impl_.zip_code_.Release();
}
inline void RiskAssessment::set_allocated_zip_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zip_code_.IsDefault()) {
    _impl_.zip_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.RiskAssessment.zip_code)
}

// int32 total_injuries = 3;
inline void RiskAssessment::clear_total_injuries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_injuries_ = 0;
}
inline ::int32_t RiskAssessment::total_injuries() const {
  // @@protoc_insertion_point(field_get:mini2.RiskAssessment.total_injuries)
  return _internal_total_injuries();
}
inline void RiskAssessment::set_total_injuries(::int32_t value) {
  _internal_set_total_injuries(value);
  // @@protoc_insertion_point(field_set:mini2.RiskAssessment.total_injuries)
}
inline ::int32_t RiskAssessment::_internal_total_injuries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_injuries_;
}
inline void RiskAssessment::_internal_set_total_injuries(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_injuries_ = value;
}

// int32 total_fatalities = 4;
inline void RiskAssessment::clear_total_fatalities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_fatalities_ = 0;
}
inline ::int32_t RiskAssessment::total_fatalities() const {
  // @@protoc_insertion_point(field_get:mini2.RiskAssessment.total_fatalities)
  return _internal_total_fatalities();
}
inline void RiskAssessment::set_total_fatalities(::int32_t value) {
  _internal_set_total_fatalities(value);
  // @@protoc_insertion_point(field_set:mini2.RiskAssessment.total_fatalities)
}
inline ::int32_t RiskAssessment::_internal_total_fatalities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_fatalities_;
}
inline void RiskAssessment::_internal_set_total_fatalities(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_fatalities_ = value;
}

// -------------------------------------------------------------------

// DatasetInfo

// int64 total_size = 1;
inline void DatasetInfo::clear_total_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_size_ = ::int64_t{0};
}
inline ::int64_t DatasetInfo::total_size() const {
  // @@protoc_insertion_point(field_get:mini2.DatasetInfo.total_size)
  return _internal_total_size();
}
inline void DatasetInfo::set_total_size(::int64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:mini2.DatasetInfo.total_size)
}
inline ::int64_t DatasetInfo::_internal_total_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_size_;
}
inline void DatasetInfo::_internal_set_total_size(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_size_ = value;
}

// -------------------------------------------------------------------

// Message

// string content = 1;
inline void Message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.Message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.Message.content)
}
inline std::string* Message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mini2.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.Message.content)
}

// string id = 2;
inline void Message::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Message::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.Message.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.Message.id)
}
inline std::string* Message::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:mini2.Message.id)
  return _s;
}
inline const std::string& Message::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Message::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Message::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.Message.id)
  return _impl_.id_.Release();
}
inline void Message::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.Message.id)
}

// int64 timestamp = 3;
inline void Message::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Message::timestamp() const {
  // @@protoc_insertion_point(field_get:mini2.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mini2.Message.timestamp)
}
inline ::int64_t Message::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Message::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// MetricsResponse

// bool success = 1;
inline void MetricsResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool MetricsResponse::success() const {
  // @@protoc_insertion_point(field_get:mini2.MetricsResponse.success)
  return _internal_success();
}
inline void MetricsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mini2.MetricsResponse.success)
}
inline bool MetricsResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void MetricsResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void MetricsResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MetricsResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.MetricsResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetricsResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.MetricsResponse.message)
}
inline std::string* MetricsResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mini2.MetricsResponse.message)
  return _s;
}
inline const std::string& MetricsResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void MetricsResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MetricsResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MetricsResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.MetricsResponse.message)
  return _impl_.message_.Release();
}
inline void MetricsResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.MetricsResponse.message)
}

// -------------------------------------------------------------------

// StealRequest

// string source_server = 1;
inline void StealRequest::clear_source_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_server_.ClearToEmpty();
}
inline const std::string& StealRequest::source_server() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.StealRequest.source_server)
  return _internal_source_server();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StealRequest::set_source_server(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_server_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.StealRequest.source_server)
}
inline std::string* StealRequest::mutable_source_server() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_server();
  // @@protoc_insertion_point(field_mutable:mini2.StealRequest.source_server)
  return _s;
}
inline const std::string& StealRequest::_internal_source_server() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_server_.Get();
}
inline void StealRequest::_internal_set_source_server(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_server_.Set(value, GetArena());
}
inline std::string* StealRequest::_internal_mutable_source_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_server_.Mutable( GetArena());
}
inline std::string* StealRequest::release_source_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.StealRequest.source_server)
  return _impl_.source_server_.Release();
}
inline void StealRequest::set_allocated_source_server(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_server_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_server_.IsDefault()) {
    _impl_.source_server_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.StealRequest.source_server)
}

// int32 requested_items = 2;
inline void StealRequest::clear_requested_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_items_ = 0;
}
inline ::int32_t StealRequest::requested_items() const {
  // @@protoc_insertion_point(field_get:mini2.StealRequest.requested_items)
  return _internal_requested_items();
}
inline void StealRequest::set_requested_items(::int32_t value) {
  _internal_set_requested_items(value);
  // @@protoc_insertion_point(field_set:mini2.StealRequest.requested_items)
}
inline ::int32_t StealRequest::_internal_requested_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_items_;
}
inline void StealRequest::_internal_set_requested_items(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_items_ = value;
}

// -------------------------------------------------------------------

// StealResponse

// repeated .mini2.Message stolen_messages = 1;
inline int StealResponse::_internal_stolen_messages_size() const {
  return _internal_stolen_messages().size();
}
inline int StealResponse::stolen_messages_size() const {
  return _internal_stolen_messages_size();
}
inline void StealResponse::clear_stolen_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stolen_messages_.Clear();
}
inline ::mini2::Message* StealResponse::mutable_stolen_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mini2.StealResponse.stolen_messages)
  return _internal_mutable_stolen_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mini2::Message>* StealResponse::mutable_stolen_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mini2.StealResponse.stolen_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_stolen_messages();
}
inline const ::mini2::Message& StealResponse::stolen_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.StealResponse.stolen_messages)
  return _internal_stolen_messages().Get(index);
}
inline ::mini2::Message* StealResponse::add_stolen_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mini2::Message* _add = _internal_mutable_stolen_messages()->Add();
  // @@protoc_insertion_point(field_add:mini2.StealResponse.stolen_messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mini2::Message>& StealResponse::stolen_messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mini2.StealResponse.stolen_messages)
  return _internal_stolen_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::mini2::Message>&
StealResponse::_internal_stolen_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stolen_messages_;
}
inline ::google::protobuf::RepeatedPtrField<::mini2::Message>*
StealResponse::_internal_mutable_stolen_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.stolen_messages_;
}

// -------------------------------------------------------------------

// MetricsUpdate

// string server_id = 1;
inline void MetricsUpdate::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& MetricsUpdate::server_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.MetricsUpdate.server_id)
  return _internal_server_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetricsUpdate::set_server_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.MetricsUpdate.server_id)
}
inline std::string* MetricsUpdate::mutable_server_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:mini2.MetricsUpdate.server_id)
  return _s;
}
inline const std::string& MetricsUpdate::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_.Get();
}
inline void MetricsUpdate::_internal_set_server_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(value, GetArena());
}
inline std::string* MetricsUpdate::_internal_mutable_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_id_.Mutable( GetArena());
}
inline std::string* MetricsUpdate::release_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.MetricsUpdate.server_id)
  return _impl_.server_id_.Release();
}
inline void MetricsUpdate::set_allocated_server_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.MetricsUpdate.server_id)
}

// double cpu_load = 2;
inline void MetricsUpdate::clear_cpu_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_load_ = 0;
}
inline double MetricsUpdate::cpu_load() const {
  // @@protoc_insertion_point(field_get:mini2.MetricsUpdate.cpu_load)
  return _internal_cpu_load();
}
inline void MetricsUpdate::set_cpu_load(double value) {
  _internal_set_cpu_load(value);
  // @@protoc_insertion_point(field_set:mini2.MetricsUpdate.cpu_load)
}
inline double MetricsUpdate::_internal_cpu_load() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_load_;
}
inline void MetricsUpdate::_internal_set_cpu_load(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_load_ = value;
}

// int32 queue_size = 3;
inline void MetricsUpdate::clear_queue_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_size_ = 0;
}
inline ::int32_t MetricsUpdate::queue_size() const {
  // @@protoc_insertion_point(field_get:mini2.MetricsUpdate.queue_size)
  return _internal_queue_size();
}
inline void MetricsUpdate::set_queue_size(::int32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:mini2.MetricsUpdate.queue_size)
}
inline ::int32_t MetricsUpdate::_internal_queue_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_size_;
}
inline void MetricsUpdate::_internal_set_queue_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_size_ = value;
}

// double memory_usage = 4;
inline void MetricsUpdate::clear_memory_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_ = 0;
}
inline double MetricsUpdate::memory_usage() const {
  // @@protoc_insertion_point(field_get:mini2.MetricsUpdate.memory_usage)
  return _internal_memory_usage();
}
inline void MetricsUpdate::set_memory_usage(double value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:mini2.MetricsUpdate.memory_usage)
}
inline double MetricsUpdate::_internal_memory_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_usage_;
}
inline void MetricsUpdate::_internal_set_memory_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_ = value;
}

// double network_latency = 5;
inline void MetricsUpdate::clear_network_latency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_latency_ = 0;
}
inline double MetricsUpdate::network_latency() const {
  // @@protoc_insertion_point(field_get:mini2.MetricsUpdate.network_latency)
  return _internal_network_latency();
}
inline void MetricsUpdate::set_network_latency(double value) {
  _internal_set_network_latency(value);
  // @@protoc_insertion_point(field_set:mini2.MetricsUpdate.network_latency)
}
inline double MetricsUpdate::_internal_network_latency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_latency_;
}
inline void MetricsUpdate::_internal_set_network_latency(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_latency_ = value;
}

// -------------------------------------------------------------------

// SyncRequest

// string server_id = 1;
inline void SyncRequest::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& SyncRequest::server_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mini2.SyncRequest.server_id)
  return _internal_server_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_server_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mini2.SyncRequest.server_id)
}
inline std::string* SyncRequest::mutable_server_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:mini2.SyncRequest.server_id)
  return _s;
}
inline const std::string& SyncRequest::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_.Get();
}
inline void SyncRequest::_internal_set_server_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(value, GetArena());
}
inline std::string* SyncRequest::_internal_mutable_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_id_.Mutable( GetArena());
}
inline std::string* SyncRequest::release_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mini2.SyncRequest.server_id)
  return _impl_.server_id_.Release();
}
inline void SyncRequest::set_allocated_server_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mini2.SyncRequest.server_id)
}

// -------------------------------------------------------------------

// SyncResponse

// bool success = 1;
inline void SyncResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SyncResponse::success() const {
  // @@protoc_insertion_point(field_get:mini2.SyncResponse.success)
  return _internal_success();
}
inline void SyncResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mini2.SyncResponse.success)
}
inline bool SyncResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SyncResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mini2


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mini3_2fproto_2fmini2_2eproto_2epb_2eh

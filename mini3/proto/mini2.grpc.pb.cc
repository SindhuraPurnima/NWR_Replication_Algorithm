// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mini2.proto

#include "mini2.pb.h"
#include "mini2.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mini2 {

static const char* InterServerService_method_names[] = {
  "/mini2.InterServerService/ForwardData",
  "/mini2.InterServerService/ShareAnalysis",
  "/mini2.InterServerService/SetTotalDatasetSize",
  "/mini2.InterServerService/StealWork",
  "/mini2.InterServerService/UpdateMetrics",
  "/mini2.InterServerService/SyncReplicas",
  "/mini2.InterServerService/RegisterServer",
  "/mini2.InterServerService/UnregisterServer",
  "/mini2.InterServerService/HealthCheck",
};

std::unique_ptr< InterServerService::Stub> InterServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InterServerService::Stub> stub(new InterServerService::Stub(channel, options));
  return stub;
}

InterServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ForwardData_(InterServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareAnalysis_(InterServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTotalDatasetSize_(InterServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StealWork_(InterServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMetrics_(InterServerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncReplicas_(InterServerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterServer_(InterServerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterServer_(InterServerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(InterServerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InterServerService::Stub::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForwardData_, context, request, response);
}

void InterServerService::Stub::async::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardData_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::CollisionBatch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForwardData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForwardDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareAnalysis_, context, request, response);
}

void InterServerService::Stub::async::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareAnalysis_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareAnalysis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::RiskAssessment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareAnalysis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareAnalysisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTotalDatasetSize_, context, request, response);
}

void InterServerService::Stub::async::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTotalDatasetSize_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTotalDatasetSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::Empty, ::mini2::DatasetInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTotalDatasetSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::Empty>* InterServerService::Stub::AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::mini2::StealResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::StealRequest, ::mini2::StealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StealWork_, context, request, response);
}

void InterServerService::Stub::async::StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::StealRequest, ::mini2::StealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StealWork_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StealWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>* InterServerService::Stub::PrepareAsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::StealResponse, ::mini2::StealRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StealWork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>* InterServerService::Stub::AsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStealWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::mini2::MetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::MetricsUpdate, ::mini2::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMetrics_, context, request, response);
}

void InterServerService::Stub::async::UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::MetricsUpdate, ::mini2::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMetrics_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>* InterServerService::Stub::PrepareAsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::MetricsResponse, ::mini2::MetricsUpdate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>* InterServerService::Stub::AsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::mini2::SyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::SyncRequest, ::mini2::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncReplicas_, context, request, response);
}

void InterServerService::Stub::async::SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::SyncRequest, ::mini2::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncReplicas_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncReplicas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>* InterServerService::Stub::PrepareAsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::SyncResponse, ::mini2::SyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncReplicas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>* InterServerService::Stub::AsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncReplicasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterServer_, context, request, response);
}

void InterServerService::Stub::async::RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterServer_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* InterServerService::Stub::PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::ServerList, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* InterServerService::Stub::AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnregisterServer_, context, request, response);
}

void InterServerService::Stub::async::UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterServer_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* InterServerService::Stub::PrepareAsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::ServerList, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnregisterServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* InterServerService::Stub::AsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregisterServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InterServerService::Stub::HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mini2::ServerInfo, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void InterServerService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mini2::ServerInfo, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void InterServerService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>* InterServerService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mini2::ServerInfo, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>* InterServerService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

InterServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::CollisionBatch, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::CollisionBatch* req,
             ::mini2::Empty* resp) {
               return service->ForwardData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::RiskAssessment, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::RiskAssessment* req,
             ::mini2::Empty* resp) {
               return service->ShareAnalysis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::DatasetInfo, ::mini2::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::DatasetInfo* req,
             ::mini2::Empty* resp) {
               return service->SetTotalDatasetSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::StealRequest, ::mini2::StealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::StealRequest* req,
             ::mini2::StealResponse* resp) {
               return service->StealWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::MetricsUpdate, ::mini2::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::MetricsUpdate* req,
             ::mini2::MetricsResponse* resp) {
               return service->UpdateMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::SyncRequest, ::mini2::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::SyncRequest* req,
             ::mini2::SyncResponse* resp) {
               return service->SyncReplicas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::ServerInfo* req,
             ::mini2::ServerList* resp) {
               return service->RegisterServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::ServerInfo, ::mini2::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::ServerInfo* req,
             ::mini2::ServerList* resp) {
               return service->UnregisterServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterServerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterServerService::Service, ::mini2::ServerInfo, ::mini2::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mini2::ServerInfo* req,
             ::mini2::ServerInfo* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

InterServerService::Service::~Service() {
}

::grpc::Status InterServerService::Service::ForwardData(::grpc::ServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::ShareAnalysis(::grpc::ServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::SetTotalDatasetSize(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::StealWork(::grpc::ServerContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::UpdateMetrics(::grpc::ServerContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::SyncReplicas(::grpc::ServerContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::RegisterServer(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::UnregisterServer(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterServerService::Service::HealthCheck(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mini2


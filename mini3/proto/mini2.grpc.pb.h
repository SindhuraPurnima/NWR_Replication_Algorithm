// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mini2.proto
#ifndef GRPC_mini2_2eproto__INCLUDED
#define GRPC_mini2_2eproto__INCLUDED

#include "mini2.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace mini2 {

// Service for inter-server communication
class InterServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mini2.InterServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Original Mini 2 RPCs
    virtual ::grpc::Status ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncForwardDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncForwardDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncShareAnalysisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncShareAnalysisRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> AsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(AsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>> PrepareAsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>>(PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    // Mini 3 Replication RPCs
    virtual ::grpc::Status StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::mini2::StealResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>> AsyncStealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>>(AsyncStealWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>> PrepareAsyncStealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>>(PrepareAsyncStealWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::mini2::MetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>> AsyncUpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>>(AsyncUpdateMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>> PrepareAsyncUpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>>(PrepareAsyncUpdateMetricsRaw(context, request, cq));
    }
    virtual ::grpc::Status SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::mini2::SyncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>> AsyncSyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>>(AsyncSyncReplicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>> PrepareAsyncSyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>>(PrepareAsyncSyncReplicasRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>> AsyncRegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>>(AsyncRegisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>> PrepareAsyncRegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>>(PrepareAsyncRegisterServerRaw(context, request, cq));
    }
    virtual ::grpc::Status UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>> AsyncUnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>>(AsyncUnregisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>> PrepareAsyncUnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>>(PrepareAsyncUnregisterServerRaw(context, request, cq));
    }
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>> AsyncHealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Original Mini 2 RPCs
      virtual void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Mini 3 Replication RPCs
      virtual void StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::Empty>* PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>* AsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::StealResponse>* PrepareAsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>* AsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::MetricsResponse>* PrepareAsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>* AsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::SyncResponse>* PrepareAsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>* AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>* PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>* AsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerList>* PrepareAsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mini2::ServerInfo>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncForwardDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncForwardDataRaw(context, request, cq));
    }
    ::grpc::Status ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncShareAnalysisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncShareAnalysisRaw(context, request, cq));
    }
    ::grpc::Status SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::mini2::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> AsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(AsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>> PrepareAsyncSetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::Empty>>(PrepareAsyncSetTotalDatasetSizeRaw(context, request, cq));
    }
    ::grpc::Status StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::mini2::StealResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>> AsyncStealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>>(AsyncStealWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>> PrepareAsyncStealWork(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>>(PrepareAsyncStealWorkRaw(context, request, cq));
    }
    ::grpc::Status UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::mini2::MetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>> AsyncUpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>>(AsyncUpdateMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>> PrepareAsyncUpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>>(PrepareAsyncUpdateMetricsRaw(context, request, cq));
    }
    ::grpc::Status SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::mini2::SyncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>> AsyncSyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>>(AsyncSyncReplicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>> PrepareAsyncSyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>>(PrepareAsyncSyncReplicasRaw(context, request, cq));
    }
    ::grpc::Status RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>> AsyncRegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>>(AsyncRegisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>> PrepareAsyncRegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>>(PrepareAsyncRegisterServerRaw(context, request, cq));
    }
    ::grpc::Status UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>> AsyncUnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>>(AsyncUnregisterServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>> PrepareAsyncUnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>>(PrepareAsyncUnregisterServerRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::mini2::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>> AsyncHealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void ForwardData(::grpc::ClientContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShareAnalysis(::grpc::ClientContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetTotalDatasetSize(::grpc::ClientContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, std::function<void(::grpc::Status)>) override;
      void StealWork(::grpc::ClientContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateMetrics(::grpc::ClientContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, std::function<void(::grpc::Status)>) override;
      void SyncReplicas(::grpc::ClientContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)>) override;
      void RegisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, std::function<void(::grpc::Status)>) override;
      void UnregisterServer(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncForwardDataRaw(::grpc::ClientContext* context, const ::mini2::CollisionBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncShareAnalysisRaw(::grpc::ClientContext* context, const ::mini2::RiskAssessment& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* AsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::Empty>* PrepareAsyncSetTotalDatasetSizeRaw(::grpc::ClientContext* context, const ::mini2::DatasetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>* AsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::StealResponse>* PrepareAsyncStealWorkRaw(::grpc::ClientContext* context, const ::mini2::StealRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>* AsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::MetricsResponse>* PrepareAsyncUpdateMetricsRaw(::grpc::ClientContext* context, const ::mini2::MetricsUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>* AsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::SyncResponse>* PrepareAsyncSyncReplicasRaw(::grpc::ClientContext* context, const ::mini2::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* AsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerList>* PrepareAsyncUnregisterServerRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mini2::ServerInfo>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::mini2::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ForwardData_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareAnalysis_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTotalDatasetSize_;
    const ::grpc::internal::RpcMethod rpcmethod_StealWork_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncReplicas_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterServer_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterServer_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Original Mini 2 RPCs
    virtual ::grpc::Status ForwardData(::grpc::ServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response);
    virtual ::grpc::Status ShareAnalysis(::grpc::ServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response);
    virtual ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response);
    // Mini 3 Replication RPCs
    virtual ::grpc::Status StealWork(::grpc::ServerContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response);
    virtual ::grpc::Status UpdateMetrics(::grpc::ServerContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response);
    virtual ::grpc::Status SyncReplicas(::grpc::ServerContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response);
    virtual ::grpc::Status RegisterServer(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response);
    virtual ::grpc::Status UnregisterServer(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response);
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ForwardData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardData(::grpc::ServerContext* context, ::mini2::CollisionBatch* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareAnalysis(::grpc::ServerContext* context, ::mini2::RiskAssessment* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDatasetSize(::grpc::ServerContext* context, ::mini2::DatasetInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StealWork() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStealWork(::grpc::ServerContext* context, ::mini2::StealRequest* request, ::grpc::ServerAsyncResponseWriter< ::mini2::StealResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMetrics(::grpc::ServerContext* context, ::mini2::MetricsUpdate* request, ::grpc::ServerAsyncResponseWriter< ::mini2::MetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncReplicas(::grpc::ServerContext* context, ::mini2::SyncRequest* request, ::grpc::ServerAsyncResponseWriter< ::mini2::SyncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterServer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterServer(::grpc::ServerContext* context, ::mini2::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::ServerList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterServer(::grpc::ServerContext* context, ::mini2::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::ServerList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::mini2::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::mini2::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ForwardData<WithAsyncMethod_ShareAnalysis<WithAsyncMethod_SetTotalDatasetSize<WithAsyncMethod_StealWork<WithAsyncMethod_UpdateMetrics<WithAsyncMethod_SyncReplicas<WithAsyncMethod_RegisterServer<WithAsyncMethod_UnregisterServer<WithAsyncMethod_HealthCheck<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ForwardData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::CollisionBatch, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::CollisionBatch* request, ::mini2::Empty* response) { return this->ForwardData(context, request, response); }));}
    void SetMessageAllocatorFor_ForwardData(
        ::grpc::MessageAllocator< ::mini2::CollisionBatch, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::CollisionBatch, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardData(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::RiskAssessment, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::RiskAssessment* request, ::mini2::Empty* response) { return this->ShareAnalysis(context, request, response); }));}
    void SetMessageAllocatorFor_ShareAnalysis(
        ::grpc::MessageAllocator< ::mini2::RiskAssessment, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::RiskAssessment, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareAnalysis(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::DatasetInfo* request, ::mini2::Empty* response) { return this->SetTotalDatasetSize(context, request, response); }));}
    void SetMessageAllocatorFor_SetTotalDatasetSize(
        ::grpc::MessageAllocator< ::mini2::DatasetInfo, ::mini2::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::DatasetInfo, ::mini2::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTotalDatasetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StealWork() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::StealRequest, ::mini2::StealResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::StealRequest* request, ::mini2::StealResponse* response) { return this->StealWork(context, request, response); }));}
    void SetMessageAllocatorFor_StealWork(
        ::grpc::MessageAllocator< ::mini2::StealRequest, ::mini2::StealResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::StealRequest, ::mini2::StealResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StealWork(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::MetricsUpdate, ::mini2::MetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::MetricsUpdate* request, ::mini2::MetricsResponse* response) { return this->UpdateMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMetrics(
        ::grpc::MessageAllocator< ::mini2::MetricsUpdate, ::mini2::MetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::MetricsUpdate, ::mini2::MetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::SyncRequest, ::mini2::SyncResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::SyncRequest* request, ::mini2::SyncResponse* response) { return this->SyncReplicas(context, request, response); }));}
    void SetMessageAllocatorFor_SyncReplicas(
        ::grpc::MessageAllocator< ::mini2::SyncRequest, ::mini2::SyncResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::SyncRequest, ::mini2::SyncResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncReplicas(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterServer() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response) { return this->RegisterServer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterServer(
        ::grpc::MessageAllocator< ::mini2::ServerInfo, ::mini2::ServerList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterServer(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerList* response) { return this->UnregisterServer(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterServer(
        ::grpc::MessageAllocator< ::mini2::ServerInfo, ::mini2::ServerList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterServer(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mini2::ServerInfo* request, ::mini2::ServerInfo* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::mini2::ServerInfo, ::mini2::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mini2::ServerInfo, ::mini2::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ForwardData<WithCallbackMethod_ShareAnalysis<WithCallbackMethod_SetTotalDatasetSize<WithCallbackMethod_StealWork<WithCallbackMethod_UpdateMetrics<WithCallbackMethod_SyncReplicas<WithCallbackMethod_RegisterServer<WithCallbackMethod_UnregisterServer<WithCallbackMethod_HealthCheck<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ForwardData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StealWork() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterServer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ForwardData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareAnalysis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDatasetSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StealWork() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStealWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncReplicas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterServer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ForwardData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ForwardData(context, request, response); }));
    }
    ~WithRawCallbackMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareAnalysis(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareAnalysis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTotalDatasetSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTotalDatasetSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StealWork() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StealWork(context, request, response); }));
    }
    ~WithRawCallbackMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StealWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncReplicas(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncReplicas(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterServer() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ForwardData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ForwardData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::CollisionBatch, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::CollisionBatch, ::mini2::Empty>* streamer) {
                       return this->StreamedForwardData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ForwardData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ForwardData(::grpc::ServerContext* /*context*/, const ::mini2::CollisionBatch* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForwardData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::CollisionBatch,::mini2::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareAnalysis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareAnalysis() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::RiskAssessment, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::RiskAssessment, ::mini2::Empty>* streamer) {
                       return this->StreamedShareAnalysis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareAnalysis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareAnalysis(::grpc::ServerContext* /*context*/, const ::mini2::RiskAssessment* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareAnalysis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::RiskAssessment,::mini2::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTotalDatasetSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTotalDatasetSize() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::DatasetInfo, ::mini2::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::DatasetInfo, ::mini2::Empty>* streamer) {
                       return this->StreamedSetTotalDatasetSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTotalDatasetSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTotalDatasetSize(::grpc::ServerContext* /*context*/, const ::mini2::DatasetInfo* /*request*/, ::mini2::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTotalDatasetSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::DatasetInfo,::mini2::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StealWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StealWork() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::StealRequest, ::mini2::StealResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::StealRequest, ::mini2::StealResponse>* streamer) {
                       return this->StreamedStealWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StealWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StealWork(::grpc::ServerContext* /*context*/, const ::mini2::StealRequest* /*request*/, ::mini2::StealResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStealWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::StealRequest,::mini2::StealResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMetrics() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::MetricsUpdate, ::mini2::MetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::MetricsUpdate, ::mini2::MetricsResponse>* streamer) {
                       return this->StreamedUpdateMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMetrics(::grpc::ServerContext* /*context*/, const ::mini2::MetricsUpdate* /*request*/, ::mini2::MetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::MetricsUpdate,::mini2::MetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncReplicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncReplicas() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::SyncRequest, ::mini2::SyncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::SyncRequest, ::mini2::SyncResponse>* streamer) {
                       return this->StreamedSyncReplicas(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncReplicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncReplicas(::grpc::ServerContext* /*context*/, const ::mini2::SyncRequest* /*request*/, ::mini2::SyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncReplicas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::SyncRequest,::mini2::SyncResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterServer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::ServerInfo, ::mini2::ServerList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::ServerInfo, ::mini2::ServerList>* streamer) {
                       return this->StreamedRegisterServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::ServerInfo,::mini2::ServerList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterServer() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::ServerInfo, ::mini2::ServerList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::ServerInfo, ::mini2::ServerList>* streamer) {
                       return this->StreamedUnregisterServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterServer(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::ServerInfo,::mini2::ServerList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mini2::ServerInfo, ::mini2::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mini2::ServerInfo, ::mini2::ServerInfo>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::mini2::ServerInfo* /*request*/, ::mini2::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mini2::ServerInfo,::mini2::ServerInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ForwardData<WithStreamedUnaryMethod_ShareAnalysis<WithStreamedUnaryMethod_SetTotalDatasetSize<WithStreamedUnaryMethod_StealWork<WithStreamedUnaryMethod_UpdateMetrics<WithStreamedUnaryMethod_SyncReplicas<WithStreamedUnaryMethod_RegisterServer<WithStreamedUnaryMethod_UnregisterServer<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ForwardData<WithStreamedUnaryMethod_ShareAnalysis<WithStreamedUnaryMethod_SetTotalDatasetSize<WithStreamedUnaryMethod_StealWork<WithStreamedUnaryMethod_UpdateMetrics<WithStreamedUnaryMethod_SyncReplicas<WithStreamedUnaryMethod_RegisterServer<WithStreamedUnaryMethod_UnregisterServer<WithStreamedUnaryMethod_HealthCheck<Service > > > > > > > > > StreamedService;
};

}  // namespace mini2


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_mini2_2eproto__INCLUDED
